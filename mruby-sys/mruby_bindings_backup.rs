/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                val |= 1 << i;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            self.set_bit(i + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __IncompleteArrayField<T> {}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 26;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _STDIO_H: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _G_config_h: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const MRB_INT_BIT: u32 = 64;
pub const MRB_PRIo: &'static [u8; 3usize] = b"lo\0";
pub const MRB_PRId: &'static [u8; 3usize] = b"ld\0";
pub const MRB_PRIx: &'static [u8; 3usize] = b"lx\0";
pub const MRB_FLAG_IS_FROZEN: u32 = 262144;
pub const MRB_FIXNUM_SHIFT: u32 = 0;
pub const MRB_EACH_OBJ_OK: u32 = 0;
pub const MRB_EACH_OBJ_BREAK: u32 = 1;
pub const MRB_GC_ARENA_SIZE: u32 = 100;
pub const MRUBY_RUBY_VERSION: &'static [u8; 4usize] = b"1.9\0";
pub const MRUBY_RUBY_ENGINE: &'static [u8; 6usize] = b"mruby\0";
pub const MRUBY_RELEASE_MAJOR: u32 = 1;
pub const MRUBY_RELEASE_MINOR: u32 = 4;
pub const MRUBY_RELEASE_TEENY: u32 = 0;
pub const MRUBY_RELEASE_NO: u32 = 10400;
pub const MRUBY_RELEASE_YEAR: u32 = 2018;
pub const MRUBY_RELEASE_MONTH: u32 = 1;
pub const MRUBY_RELEASE_DAY: u32 = 16;
pub const MRUBY_BIRTH_YEAR: u32 = 2010;
pub const MRUBY_AUTHOR: &'static [u8; 17usize] = b"mruby developers\0";
pub const MRB_FIXED_STATE_ATEXIT_STACK_SIZE: u32 = 5;
pub const MRB_METHOD_CACHE_SIZE: u32 = 128;
pub const MRB_STATE_NO_REGEXP: u32 = 1;
pub const MRB_STATE_REGEXP: u32 = 2;
pub const STR_FUNC_PARSING: u32 = 1;
pub const STR_FUNC_EXPAND: u32 = 2;
pub const STR_FUNC_REGEXP: u32 = 4;
pub const STR_FUNC_WORD: u32 = 8;
pub const STR_FUNC_SYMBOL: u32 = 16;
pub const STR_FUNC_ARRAY: u32 = 32;
pub const STR_FUNC_HEREDOC: u32 = 64;
pub const STR_FUNC_XQUOTE: u32 = 128;
pub const MRB_PARSER_TOKBUF_MAX: u32 = 65536;
pub const MRB_PARSER_TOKBUF_SIZE: u32 = 256;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const KHASH_DEFAULT_SIZE: u32 = 32;
pub const KHASH_MIN_SIZE: u32 = 8;
pub const MRB_HASH_DEFAULT: u32 = 1;
pub const MRB_HASH_PROC_DEFAULT: u32 = 2;
pub const MRB_STR_SHARED: u32 = 1;
pub const MRB_STR_FSHARED: u32 = 2;
pub const MRB_STR_NOFREE: u32 = 4;
pub const MRB_STR_POOL: u32 = 8;
pub const MRB_STR_NO_UTF: u32 = 16;
pub const MRB_STR_EMBED: u32 = 32;
pub const MRB_STR_EMBED_LEN_MASK: u32 = 1984;
pub const MRB_STR_EMBED_LEN_SHIFT: u32 = 6;
pub const MRB_ARY_EMBED_MASK: u32 = 7;
pub const MRB_ARY_SHARED: u32 = 256;
pub const MRB_FLAG_IS_PREPENDED: u32 = 524288;
pub const MRB_FLAG_IS_ORIGIN: u32 = 1048576;
pub const MRB_FLAG_IS_INHERITED: u32 = 2097152;
pub const MRB_INSTANCE_TT_MASK: u32 = 255;
pub const MRB_ISEQ_NO_FREE: u32 = 1;
pub const MRB_ENV_STACK_UNSHARED: u32 = 1048576;
pub const MRB_PROC_CFUNC_FL: u32 = 128;
pub const MRB_PROC_STRICT: u32 = 256;
pub const MRB_PROC_ORPHAN: u32 = 512;
pub const MRB_PROC_ENVSET: u32 = 1024;
pub const MRB_PROC_SCOPE: u32 = 2048;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "\u{1}stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
/// MRuby Value definition functions and macros.
pub type mrb_sym = u32;
pub type mrb_bool = u8;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type mrb_int = i64;
extern "C" {
    pub fn mrb_float_read(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
pub type mrb_float = f64;
pub const mrb_vtype_MRB_TT_FALSE: mrb_vtype = 0;
pub const mrb_vtype_MRB_TT_FREE: mrb_vtype = 1;
pub const mrb_vtype_MRB_TT_TRUE: mrb_vtype = 2;
pub const mrb_vtype_MRB_TT_FIXNUM: mrb_vtype = 3;
pub const mrb_vtype_MRB_TT_SYMBOL: mrb_vtype = 4;
pub const mrb_vtype_MRB_TT_UNDEF: mrb_vtype = 5;
pub const mrb_vtype_MRB_TT_FLOAT: mrb_vtype = 6;
pub const mrb_vtype_MRB_TT_CPTR: mrb_vtype = 7;
pub const mrb_vtype_MRB_TT_OBJECT: mrb_vtype = 8;
pub const mrb_vtype_MRB_TT_CLASS: mrb_vtype = 9;
pub const mrb_vtype_MRB_TT_MODULE: mrb_vtype = 10;
pub const mrb_vtype_MRB_TT_ICLASS: mrb_vtype = 11;
pub const mrb_vtype_MRB_TT_SCLASS: mrb_vtype = 12;
pub const mrb_vtype_MRB_TT_PROC: mrb_vtype = 13;
pub const mrb_vtype_MRB_TT_ARRAY: mrb_vtype = 14;
pub const mrb_vtype_MRB_TT_HASH: mrb_vtype = 15;
pub const mrb_vtype_MRB_TT_STRING: mrb_vtype = 16;
pub const mrb_vtype_MRB_TT_RANGE: mrb_vtype = 17;
pub const mrb_vtype_MRB_TT_EXCEPTION: mrb_vtype = 18;
pub const mrb_vtype_MRB_TT_FILE: mrb_vtype = 19;
pub const mrb_vtype_MRB_TT_ENV: mrb_vtype = 20;
pub const mrb_vtype_MRB_TT_DATA: mrb_vtype = 21;
pub const mrb_vtype_MRB_TT_FIBER: mrb_vtype = 22;
pub const mrb_vtype_MRB_TT_ISTRUCT: mrb_vtype = 23;
pub const mrb_vtype_MRB_TT_BREAK: mrb_vtype = 24;
pub const mrb_vtype_MRB_TT_MAXDEFINE: mrb_vtype = 25;
pub type mrb_vtype = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBasic {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
}
#[test]
fn bindgen_test_layout_RBasic() {
    assert_eq!(
        ::std::mem::size_of::<RBasic>(),
        24usize,
        concat!("Size of: ", stringify!(RBasic))
    );
    assert_eq!(
        ::std::mem::align_of::<RBasic>(),
        8usize,
        concat!("Alignment of ", stringify!(RBasic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBasic>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RBasic), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBasic>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBasic),
            "::",
            stringify!(gcnext)
        )
    );
}
impl RBasic {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RObject {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
}
#[test]
fn bindgen_test_layout_RObject() {
    assert_eq!(
        ::std::mem::size_of::<RObject>(),
        32usize,
        concat!("Size of: ", stringify!(RObject))
    );
    assert_eq!(
        ::std::mem::align_of::<RObject>(),
        8usize,
        concat!("Alignment of ", stringify!(RObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RObject>())).iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RObject),
            "::",
            stringify!(iv)
        )
    );
}
impl RObject {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RFiber {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub cxt: *mut mrb_context,
}
#[test]
fn bindgen_test_layout_RFiber() {
    assert_eq!(
        ::std::mem::size_of::<RFiber>(),
        32usize,
        concat!("Size of: ", stringify!(RFiber))
    );
    assert_eq!(
        ::std::mem::align_of::<RFiber>(),
        8usize,
        concat!("Alignment of ", stringify!(RFiber))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RFiber), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RFiber),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RFiber>())).cxt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RFiber),
            "::",
            stringify!(cxt)
        )
    );
}
impl RFiber {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_value {
    pub value: mrb_value__bindgen_ty_1,
    pub tt: mrb_vtype,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mrb_value__bindgen_ty_1 {
    pub f: mrb_float,
    pub p: *mut ::std::os::raw::c_void,
    pub i: mrb_int,
    pub sym: mrb_sym,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_mrb_value__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mrb_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_value__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_value__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value__bindgen_ty_1>())).sym as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value__bindgen_ty_1),
            "::",
            stringify!(sym)
        )
    );
}
#[test]
fn bindgen_test_layout_mrb_value() {
    assert_eq!(
        ::std::mem::size_of::<mrb_value>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_value))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_value>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_value>())).tt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_value),
            "::",
            stringify!(tt)
        )
    );
}
extern "C" {
    pub fn mrb_regexp_p(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_bool;
}
pub type mrb_each_object_callback = ::std::option::Option<
    unsafe extern "C" fn(mrb: *mut mrb_state, obj: *mut RBasic, data: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn mrb_objspace_each_objects(
        mrb: *mut mrb_state,
        callback: mrb_each_object_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mrb_free_context(mrb: *mut mrb_state, c: *mut mrb_context);
}
pub const mrb_gc_state_MRB_GC_STATE_ROOT: mrb_gc_state = 0;
pub const mrb_gc_state_MRB_GC_STATE_MARK: mrb_gc_state = 1;
pub const mrb_gc_state_MRB_GC_STATE_SWEEP: mrb_gc_state = 2;
pub type mrb_gc_state = u32;
#[repr(C)]
#[derive(Debug)]
pub struct mrb_heap_page {
    pub freelist: *mut RBasic,
    pub prev: *mut mrb_heap_page,
    pub next: *mut mrb_heap_page,
    pub free_next: *mut mrb_heap_page,
    pub free_prev: *mut mrb_heap_page,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub objects: __IncompleteArrayField<*mut ::std::os::raw::c_void>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_mrb_heap_page() {
    assert_eq!(
        ::std::mem::size_of::<mrb_heap_page>(),
        48usize,
        concat!("Size of: ", stringify!(mrb_heap_page))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_heap_page>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_heap_page))
    );
}
impl mrb_heap_page {
    #[inline]
    pub fn old(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_old(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(old: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let old: u8 = unsafe { ::std::mem::transmute(old) };
            old as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_gc {
    pub heaps: *mut mrb_heap_page,
    pub sweeps: *mut mrb_heap_page,
    pub free_heaps: *mut mrb_heap_page,
    pub live: usize,
    pub arena: *mut *mut RBasic,
    pub arena_capa: ::std::os::raw::c_int,
    pub arena_idx: ::std::os::raw::c_int,
    pub state: mrb_gc_state,
    pub current_white_part: ::std::os::raw::c_int,
    pub gray_list: *mut RBasic,
    pub atomic_gray_list: *mut RBasic,
    pub live_after_mark: usize,
    pub threshold: usize,
    pub interval_ratio: ::std::os::raw::c_int,
    pub step_ratio: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub majorgc_old_threshold: usize,
}
#[test]
fn bindgen_test_layout_mrb_gc() {
    assert_eq!(
        ::std::mem::size_of::<mrb_gc>(),
        112usize,
        concat!("Size of: ", stringify!(mrb_gc))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_gc>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_gc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).heaps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(heaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).sweeps as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(sweeps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).free_heaps as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(free_heaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).live as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(live)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena_capa as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena_capa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).arena_idx as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(arena_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).state as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).current_white_part as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(current_white_part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).gray_list as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(gray_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).atomic_gray_list as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(atomic_gray_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).live_after_mark as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(live_after_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).threshold as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).interval_ratio as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(interval_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).step_ratio as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(step_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_gc>())).majorgc_old_threshold as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_gc),
            "::",
            stringify!(majorgc_old_threshold)
        )
    );
}
impl mrb_gc {
    #[inline]
    pub fn iterating(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iterating(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disabled(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_disabled(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn full(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_full(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn generational(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_generational(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_of_memory(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_out_of_memory(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        iterating: mrb_bool,
        disabled: mrb_bool,
        full: mrb_bool,
        generational: mrb_bool,
        out_of_memory: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let iterating: u8 = unsafe { ::std::mem::transmute(iterating) };
            iterating as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let disabled: u8 = unsafe { ::std::mem::transmute(disabled) };
            disabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let full: u8 = unsafe { ::std::mem::transmute(full) };
            full as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let generational: u8 = unsafe { ::std::mem::transmute(generational) };
            generational as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let out_of_memory: u8 = unsafe { ::std::mem::transmute(out_of_memory) };
            out_of_memory as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_object_dead_p(mrb: *mut mrb_state, object: *mut RBasic) -> mrb_bool;
}
/// MRuby C API entry point
pub type mrb_code = u32;
/// Required arguments signature type.
pub type mrb_aspec = u32;
/// Function pointer type of custom allocator used in @see mrb_open_allocf.
///
/// The function pointing it must behave similarly as realloc except:
/// - If ptr is NULL it must allocate new space.
/// - If s is NULL, ptr must be freed.
///
/// See @see mrb_default_allocf for the default implementation.
pub type mrb_allocf = ::std::option::Option<
    unsafe extern "C" fn(
        mrb: *mut mrb_state,
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        ud: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_callinfo {
    pub mid: mrb_sym,
    pub proc_: *mut RProc,
    pub stackent: *mut mrb_value,
    pub nregs: ::std::os::raw::c_int,
    pub ridx: ::std::os::raw::c_int,
    pub epos: ::std::os::raw::c_int,
    pub env: *mut REnv,
    pub pc: *mut mrb_code,
    pub err: *mut mrb_code,
    pub argc: ::std::os::raw::c_int,
    pub acc: ::std::os::raw::c_int,
    pub target_class: *mut RClass,
}
#[test]
fn bindgen_test_layout_mrb_callinfo() {
    assert_eq!(
        ::std::mem::size_of::<mrb_callinfo>(),
        80usize,
        concat!("Size of: ", stringify!(mrb_callinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_callinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_callinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).mid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).proc_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).stackent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(stackent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).nregs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(nregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).ridx as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(ridx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).epos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(epos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).env as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).pc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).err as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).argc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).acc as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_callinfo>())).target_class as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_callinfo),
            "::",
            stringify!(target_class)
        )
    );
}
pub const mrb_fiber_state_MRB_FIBER_CREATED: mrb_fiber_state = 0;
pub const mrb_fiber_state_MRB_FIBER_RUNNING: mrb_fiber_state = 1;
pub const mrb_fiber_state_MRB_FIBER_RESUMED: mrb_fiber_state = 2;
pub const mrb_fiber_state_MRB_FIBER_SUSPENDED: mrb_fiber_state = 3;
pub const mrb_fiber_state_MRB_FIBER_TRANSFERRED: mrb_fiber_state = 4;
pub const mrb_fiber_state_MRB_FIBER_TERMINATED: mrb_fiber_state = 5;
pub type mrb_fiber_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_context {
    pub prev: *mut mrb_context,
    pub stack: *mut mrb_value,
    pub stbase: *mut mrb_value,
    pub stend: *mut mrb_value,
    pub ci: *mut mrb_callinfo,
    pub cibase: *mut mrb_callinfo,
    pub ciend: *mut mrb_callinfo,
    pub rescue: *mut *mut mrb_code,
    pub rsize: ::std::os::raw::c_int,
    pub ensure: *mut *mut RProc,
    pub esize: ::std::os::raw::c_int,
    pub eidx: ::std::os::raw::c_int,
    pub status: mrb_fiber_state,
    pub vmexec: mrb_bool,
    pub fib: *mut RFiber,
}
#[test]
fn bindgen_test_layout_mrb_context() {
    assert_eq!(
        ::std::mem::size_of::<mrb_context>(),
        104usize,
        concat!("Size of: ", stringify!(mrb_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stbase as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).stend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(stend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ci as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ci)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).cibase as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(cibase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ciend as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ciend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).rescue as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(rescue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).rsize as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(rsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).ensure as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(ensure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).esize as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(esize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).eidx as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(eidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).status as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).vmexec as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(vmexec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_context>())).fib as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_context),
            "::",
            stringify!(fib)
        )
    );
}
pub type mrb_func_t =
    ::std::option::Option<unsafe extern "C" fn(mrb: *mut mrb_state, arg1: mrb_value) -> mrb_value>;
pub type mrb_method_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_cache_entry {
    pub c: *mut RClass,
    pub c0: *mut RClass,
    pub mid: mrb_sym,
    pub m: mrb_method_t,
}
#[test]
fn bindgen_test_layout_mrb_cache_entry() {
    assert_eq!(
        ::std::mem::size_of::<mrb_cache_entry>(),
        32usize,
        concat!("Size of: ", stringify!(mrb_cache_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_cache_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_cache_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_cache_entry>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_cache_entry),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_cache_entry>())).c0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_cache_entry),
            "::",
            stringify!(c0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_cache_entry>())).mid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_cache_entry),
            "::",
            stringify!(mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_cache_entry>())).m as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_cache_entry),
            "::",
            stringify!(m)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_jmpbuf {
    _unused: [u8; 0],
}
pub type mrb_atexit_func = ::std::option::Option<unsafe extern "C" fn(arg1: *mut mrb_state)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_state {
    pub jmp: *mut mrb_jmpbuf,
    pub flags: u32,
    pub allocf: mrb_allocf,
    pub allocf_ud: *mut ::std::os::raw::c_void,
    pub c: *mut mrb_context,
    pub root_c: *mut mrb_context,
    pub globals: *mut iv_tbl,
    pub exc: *mut RObject,
    pub top_self: *mut RObject,
    pub object_class: *mut RClass,
    pub class_class: *mut RClass,
    pub module_class: *mut RClass,
    pub proc_class: *mut RClass,
    pub string_class: *mut RClass,
    pub array_class: *mut RClass,
    pub hash_class: *mut RClass,
    pub range_class: *mut RClass,
    pub float_class: *mut RClass,
    pub fixnum_class: *mut RClass,
    pub true_class: *mut RClass,
    pub false_class: *mut RClass,
    pub nil_class: *mut RClass,
    pub symbol_class: *mut RClass,
    pub kernel_module: *mut RClass,
    pub mems: *mut alloca_header,
    pub gc: mrb_gc,
    pub cache: [mrb_cache_entry; 128usize],
    pub symidx: mrb_sym,
    pub name2sym: *mut kh_n2s,
    pub symtbl: *mut symbol_name,
    pub symcapa: usize,
    pub eException_class: *mut RClass,
    pub eStandardError_class: *mut RClass,
    pub nomem_err: *mut RObject,
    pub stack_err: *mut RObject,
    pub ud: *mut ::std::os::raw::c_void,
    pub atexit_stack: *mut mrb_atexit_func,
    pub atexit_stack_len: mrb_int,
}
#[test]
fn bindgen_test_layout_mrb_state() {
    assert_eq!(
        ::std::mem::size_of::<mrb_state>(),
        4496usize,
        concat!("Size of: ", stringify!(mrb_state))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_state>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).jmp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(jmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).allocf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(allocf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).allocf_ud as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(allocf_ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).c as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).root_c as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(root_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).globals as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).exc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(exc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).top_self as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(top_self)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).object_class as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(object_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).class_class as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(class_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).module_class as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(module_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).proc_class as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(proc_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).string_class as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(string_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).array_class as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(array_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).hash_class as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(hash_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).range_class as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(range_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).float_class as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(float_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).fixnum_class as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(fixnum_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).true_class as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(true_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).false_class as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(false_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).nil_class as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(nil_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symbol_class as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symbol_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).kernel_module as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(kernel_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).mems as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(mems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).gc as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).cache as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symidx as *const _ as usize },
        4408usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).name2sym as *const _ as usize },
        4416usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(name2sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symtbl as *const _ as usize },
        4424usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symtbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).symcapa as *const _ as usize },
        4432usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(symcapa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).eException_class as *const _ as usize },
        4440usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(eException_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).eStandardError_class as *const _ as usize },
        4448usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(eStandardError_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).nomem_err as *const _ as usize },
        4456usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(nomem_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).stack_err as *const _ as usize },
        4464usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(stack_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).ud as *const _ as usize },
        4472usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(ud)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).atexit_stack as *const _ as usize },
        4480usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(atexit_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_state>())).atexit_stack_len as *const _ as usize },
        4488usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_state),
            "::",
            stringify!(atexit_stack_len)
        )
    );
}
extern "C" {
    /// Defines a new class.
    ///
    /// If you're creating a gem it may look something like this:
    ///
    /// !!!c
    /// void mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_class;
    /// example_class = mrb_define_class(mrb, "Example_Class", mrb->object_class);
    /// }
    ///
    /// void mrb_example_gem_final(mrb_state* mrb) {
    /// //free(TheAnimals);
    /// }
    ///
    /// @param [mrb_state *] mrb The current mruby state.
    /// @param [const char *] name The name of the defined class.
    /// @param [struct RClass *] super The new class parent.
    /// @return [struct RClass *] Reference to the newly defined class.
    /// @see mrb_define_class_under
    pub fn mrb_define_class(
        mrb: *mut mrb_state,
        name: *const ::std::os::raw::c_char,
        super_: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    /// Defines a new module.
    ///
    /// @param [mrb_state *] mrb_state* The current mruby state.
    /// @param [const char *] char* The name of the module.
    /// @return [struct RClass *] Reference to the newly defined module.
    pub fn mrb_define_module(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_singleton_class(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    /// Include a module in another class or module.
    /// Equivalent to:
    ///
    /// module B
    /// include A
    /// end
    /// @param [mrb_state *] mrb_state* The current mruby state.
    /// @param [struct RClass *] RClass* A reference to module or a class.
    /// @param [struct RClass *] RClass* A reference to the module to be included.
    pub fn mrb_include_module(arg1: *mut mrb_state, arg2: *mut RClass, arg3: *mut RClass);
}
extern "C" {
    /// Prepends a module in another class or module.
    ///
    /// Equivalent to:
    /// module B
    /// prepend A
    /// end
    /// @param [mrb_state *] mrb_state* The current mruby state.
    /// @param [struct RClass *] RClass* A reference to module or a class.
    /// @param [struct RClass *] RClass* A reference to the module to be prepended.
    pub fn mrb_prepend_module(arg1: *mut mrb_state, arg2: *mut RClass, arg3: *mut RClass);
}
extern "C" {
    /// Defines a global function in ruby.
    ///
    /// If you're creating a gem it may look something like this
    ///
    /// Example:
    ///
    /// !!!c
    /// mrb_value example_method(mrb_state* mrb, mrb_value self)
    /// {
    /// puts("Executing example command!");
    /// return self;
    /// }
    ///
    /// void mrb_example_gem_init(mrb_state* mrb)
    /// {
    /// mrb_define_method(mrb, mrb->kernel_module, "example_method", example_method, MRB_ARGS_NONE());
    /// }
    ///
    /// @param [mrb_state *] mrb The MRuby state reference.
    /// @param [struct RClass *] cla The class pointer where the method will be defined.
    /// @param [const char *] name The name of the method being defined.
    /// @param [mrb_func_t] func The function pointer to the method definition.
    /// @param [mrb_aspec] aspec The method parameters declaration.
    pub fn mrb_define_method(
        mrb: *mut mrb_state,
        cla: *mut RClass,
        name: *const ::std::os::raw::c_char,
        func: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    /// Defines a class method.
    ///
    /// Example:
    ///
    /// # Ruby style
    /// class Foo
    /// def Foo.bar
    /// end
    /// end
    /// // C style
    /// mrb_value bar_method(mrb_state* mrb, mrb_value self){
    /// return mrb_nil_value();
    /// }
    /// void mrb_example_gem_init(mrb_state* mrb){
    /// struct RClass *foo;
    /// foo = mrb_define_class(mrb, "Foo", mrb->object_class);
    /// mrb_define_class_method(mrb, foo, "bar", bar_method, MRB_ARGS_NONE());
    /// }
    /// @param [mrb_state *] mrb_state* The MRuby state reference.
    /// @param [struct RClass *] RClass* The class where the class method will be defined.
    /// @param [const char *] char* The name of the class method being defined.
    /// @param [mrb_func_t] mrb_func_t The function pointer to the class method definition.
    /// @param [mrb_aspec] mrb_aspec The method parameters declaration.
    pub fn mrb_define_class_method(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_func_t,
        arg5: mrb_aspec,
    );
}
extern "C" {
    pub fn mrb_define_singleton_method(
        arg1: *mut mrb_state,
        arg2: *mut RObject,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_func_t,
        arg5: mrb_aspec,
    );
}
extern "C" {
    /// Defines a module fuction.
    ///
    /// Example:
    ///
    /// # Ruby style
    /// module Foo
    /// def Foo.bar
    /// end
    /// end
    /// // C style
    /// mrb_value bar_method(mrb_state* mrb, mrb_value self){
    /// return mrb_nil_value();
    /// }
    /// void mrb_example_gem_init(mrb_state* mrb){
    /// struct RClass *foo;
    /// foo = mrb_define_module(mrb, "Foo");
    /// mrb_define_module_function(mrb, foo, "bar", bar_method, MRB_ARGS_NONE());
    /// }
    /// @param [mrb_state *] mrb_state* The MRuby state reference.
    /// @param [struct RClass *] RClass* The module where the module function will be defined.
    /// @param [const char *] char* The name of the module function being defined.
    /// @param [mrb_func_t] mrb_func_t The function pointer to the module function definition.
    /// @param [mrb_aspec] mrb_aspec The method parameters declaration.
    pub fn mrb_define_module_function(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_func_t,
        arg5: mrb_aspec,
    );
}
extern "C" {
    /// Defines a constant.
    ///
    /// Example:
    ///
    /// # Ruby style
    /// class ExampleClass
    /// AGE = 22
    /// end
    /// // C style
    /// #include <stdio.h>
    /// #include <mruby.h>
    ///
    /// void
    /// mrb_example_gem_init(mrb_state* mrb){
    /// mrb_define_const(mrb, mrb->kernel_module, "AGE", mrb_fixnum_value(22));
    /// }
    ///
    /// mrb_value
    /// mrb_example_gem_final(mrb_state* mrb){
    /// }
    /// @param [mrb_state *] mrb_state* The MRuby state reference.
    /// @param [struct RClass *] RClass* A class or module the constant is defined in.
    /// @param [const char *] name The name of the constant being defined.
    /// @param [mrb_value] mrb_value The value for the constant.
    pub fn mrb_define_const(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        name: *const ::std::os::raw::c_char,
        arg3: mrb_value,
    );
}
extern "C" {
    /// Undefines a method.
    ///
    /// Example:
    ///
    /// # Ruby style
    ///
    /// class ExampleClassA
    /// def example_method
    /// "example"
    /// end
    /// end
    /// ExampleClassA.new.example_method # => example
    ///
    /// class ExampleClassB < ExampleClassA
    /// undef_method :example_method
    /// end
    ///
    /// ExampleClassB.new.example_method # => undefined method 'example_method' for ExampleClassB (NoMethodError)
    ///
    /// // C style
    /// #include <stdio.h>
    /// #include <mruby.h>
    ///
    /// mrb_value
    /// mrb_example_method(mrb_state *mrb){
    /// return mrb_str_new_lit(mrb, "example");
    /// }
    ///
    /// void
    /// mrb_example_gem_init(mrb_state* mrb){
    /// struct RClass *example_class_a;
    /// struct RClass *example_class_b;
    /// struct RClass *example_class_c;
    ///
    /// example_class_a = mrb_define_class(mrb, "ExampleClassA", mrb->object_class);
    /// mrb_define_method(mrb, example_class_a, "example_method", mrb_example_method, MRB_ARGS_NONE());
    /// example_class_b = mrb_define_class(mrb, "ExampleClassB", example_class_a);
    /// example_class_c = mrb_define_class(mrb, "ExampleClassC", example_class_b);
    /// mrb_undef_method(mrb, example_class_c, "example_method");
    /// }
    ///
    /// mrb_example_gem_final(mrb_state* mrb){
    /// }
    /// @param [mrb_state*] mrb_state* The mruby state reference.
    /// @param [struct RClass*] RClass* A class the method will be undefined from.
    /// @param [const char*] constchar* The name of the method to be undefined.
    pub fn mrb_undef_method(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// Undefine a class method.
    /// Example:
    ///
    /// # Ruby style
    /// class ExampleClass
    /// def self.example_method
    /// "example"
    /// end
    /// end
    ///
    /// ExampleClass.example_method
    ///
    /// // C style
    /// #include <stdio.h>
    /// #include <mruby.h>
    ///
    /// mrb_value
    /// mrb_example_method(mrb_state *mrb){
    /// return mrb_str_new_lit(mrb, "example");
    /// }
    ///
    /// void
    /// mrb_example_gem_init(mrb_state* mrb){
    /// struct RClass *example_class;
    /// example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class);
    /// mrb_define_class_method(mrb, example_class, "example_method", mrb_example_method, MRB_ARGS_NONE());
    /// mrb_undef_class_method(mrb, example_class, "example_method");
    /// }
    ///
    /// void
    /// mrb_example_gem_final(mrb_state* mrb){
    /// }
    /// @param [mrb_state*] mrb_state* The mruby state reference.
    /// @param [RClass*] RClass* A class the class method will be undefined from.
    /// @param [constchar*] constchar* The name of the class method to be undefined.
    pub fn mrb_undef_class_method(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    /// Initialize a new object instace of c class.
    ///
    /// Example:
    ///
    /// # Ruby style
    /// class ExampleClass
    /// end
    ///
    /// p ExampleClass # => #<ExampleClass:0x9958588>
    /// // C style
    /// #include <stdio.h>
    /// #include <mruby.h>
    ///
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_class;
    /// mrb_value obj;
    /// example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class); # => class ExampleClass; end
    /// obj = mrb_obj_new(mrb, example_class, 0, NULL); # => ExampleClass.new
    /// mrb_p(mrb, obj); // => Kernel#p
    /// }
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [RClass*] c Reference to the class of the new object.
    /// @param [mrb_int] argc Number of arguments in argv
    /// @param [const mrb_value *] argv Array of mrb_value to initialize the object
    /// @return [mrb_value] The newly initialized object
    pub fn mrb_obj_new(
        mrb: *mut mrb_state,
        c: *mut RClass,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_instance_new(mrb: *mut mrb_state, cv: mrb_value) -> mrb_value;
}
extern "C" {
    /// Creates a new instance of Class, Class.
    ///
    /// Example:
    ///
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_class;
    ///
    /// mrb_value obj;
    /// example_class = mrb_class_new(mrb, mrb->object_class);
    /// obj = mrb_obj_new(mrb, example_class, 0, NULL); // => #<#<Class:0x9a945b8>:0x9a94588>
    /// mrb_p(mrb, obj); // => Kernel#p
    /// }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] super The super class or parent.
    /// @return [struct RClass *] Reference to the new class.
    pub fn mrb_class_new(mrb: *mut mrb_state, super_: *mut RClass) -> *mut RClass;
}
extern "C" {
    /// Creates a new module, Module.
    ///
    /// Example:
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_module;
    ///
    /// example_module = mrb_module_new(mrb);
    /// }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @return [struct RClass *] Reference to the new module.
    pub fn mrb_module_new(mrb: *mut mrb_state) -> *mut RClass;
}
extern "C" {
    /// Returns an mrb_bool. True if class was defined, and false if the class was not defined.
    ///
    /// Example:
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_class;
    /// mrb_bool cd;
    ///
    /// example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class);
    /// cd = mrb_class_defined(mrb, "ExampleClass");
    ///
    /// // If mrb_class_defined returns 1 then puts "True"
    /// // If mrb_class_defined returns 0 then puts "False"
    /// if (cd == 1){
    /// puts("True");
    /// }
    /// else {
    /// puts("False");
    /// }
    /// }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name A string representing the name of the class.
    /// @return [mrb_bool] A boolean value.
    pub fn mrb_class_defined(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> mrb_bool;
}
extern "C" {
    /// Gets a class.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name The name of the class.
    /// @return [struct RClass *] A reference to the class.
    pub fn mrb_class_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    /// Gets a exception class.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name The name of the class.
    /// @return [struct RClass *] A reference to the class.
    pub fn mrb_exc_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    /// Returns an mrb_bool. True if inner class was defined, and false if the inner class was not defined.
    ///
    /// Example:
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_outer, *example_inner;
    /// mrb_bool cd;
    ///
    /// example_outer = mrb_define_module(mrb, "ExampleOuter");
    ///
    /// example_inner = mrb_define_class_under(mrb, example_outer, "ExampleInner", mrb->object_class);
    /// cd = mrb_class_defined_under(mrb, example_outer, "ExampleInner");
    ///
    /// // If mrb_class_defined_under returns 1 then puts "True"
    /// // If mrb_class_defined_under returns 0 then puts "False"
    /// if (cd == 1){
    /// puts("True");
    /// }
    /// else {
    /// puts("False");
    /// }
    /// }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer The name of the outer class.
    /// @param [const char *] name A string representing the name of the inner class.
    /// @return [mrb_bool] A boolean value.
    pub fn mrb_class_defined_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> mrb_bool;
}
extern "C" {
    /// Gets a child class.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer The name of the parent class.
    /// @param [const char *] name The name of the class.
    /// @return [struct RClass *] A reference to the class.
    pub fn mrb_class_get_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    /// Gets a module.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [const char *] name The name of the module.
    /// @return [struct RClass *] A reference to the module.
    pub fn mrb_module_get(mrb: *mut mrb_state, name: *const ::std::os::raw::c_char) -> *mut RClass;
}
extern "C" {
    /// Gets a module defined under another module.
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer The name of the outer module.
    /// @param [const char *] name The name of the module.
    /// @return [struct RClass *] A reference to the module.
    pub fn mrb_module_get_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_notimplement_m(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    /// Duplicate an object.
    ///
    /// Equivalent to:
    /// Object#dup
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [mrb_value] obj Object to be duplicate.
    /// @return [mrb_value] The newly duplicated object.
    pub fn mrb_obj_dup(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_to_integer(
        mrb: *mut mrb_state,
        val: mrb_value,
        method: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    /// Returns true if obj responds to the given method. If the method was defined for that
    /// class it returns true, it returns false otherwise.
    ///
    /// Example:
    /// # Ruby style
    /// class ExampleClass
    /// def example_method
    /// end
    /// end
    ///
    /// ExampleClass.new.respond_to?(:example_method) # => true
    ///
    /// // C style
    /// void
    /// mrb_example_gem_init(mrb_state* mrb) {
    /// struct RClass *example_class;
    /// mrb_sym mid;
    /// mrb_bool obj_resp;
    ///
    /// example_class = mrb_define_class(mrb, "ExampleClass", mrb->object_class);
    /// mrb_define_method(mrb, example_class, "example_method", exampleMethod, MRB_ARGS_NONE());
    /// mid = mrb_intern_str(mrb, mrb_str_new_lit(mrb, "example_method" ));
    /// obj_resp = mrb_obj_respond_to(mrb, example_class, mid); // => 1(true in Ruby world)
    ///
    /// // If mrb_obj_respond_to returns 1 then puts "True"
    /// // If mrb_obj_respond_to returns 0 then puts "False"
    /// if (obj_resp == 1) {
    /// puts("True");
    /// }
    /// else if (obj_resp == 0) {
    /// puts("False");
    /// }
    /// }
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] c A reference to a class.
    /// @param [mrb_sym] mid A symbol referencing a method id.
    /// @return [mrb_bool] A boolean value.
    pub fn mrb_obj_respond_to(mrb: *mut mrb_state, c: *mut RClass, mid: mrb_sym) -> mrb_bool;
}
extern "C" {
    /// Defines a new class under a given module
    ///
    /// @param [mrb_state*] mrb The current mruby state.
    /// @param [struct RClass *] outer Reference to the module under which the new class will be defined
    /// @param [const char *] name The name of the defined class
    /// @param [struct RClass *] super The new class parent
    /// @return [struct RClass *] Reference to the newly defined class
    /// @see mrb_define_class
    pub fn mrb_define_class_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
        super_: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_define_module_under(
        mrb: *mut mrb_state,
        outer: *mut RClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut RClass;
}
/// Format specifiers for {mrb_get_args} function
///
/// Must be a C string composed of the following format specifiers:
///
/// | char | Ruby type      | C types           | Notes                                               |
/// |:----:|----------------|-------------------|----------------------------------------------------|
/// | `o`  | {Object}       | {mrb_value}       | Could be used to retrieve any type of argument     |
/// | `C`  | {Class}/{Module} | {mrb_value}     |                                                    |
/// | `S`  | {String}       | {mrb_value}       | when `!` follows, the value may be `nil`           |
/// | `A`  | {Array}        | {mrb_value}       | when `!` follows, the value may be `nil`           |
/// | `H`  | {Hash}         | {mrb_value}       | when `!` follows, the value may be `nil`           |
/// | `s`  | {String}       | char *, {mrb_int} |  Receive two arguments; `s!` gives (`NULL`,`0`) for `nil`       |
/// | `z`  | {String}       | char *            | `NULL` terminated string; `z!` gives `NULL` for `nil`           |
/// | `a`  | {Array}        | {mrb_value} *, {mrb_int} | Receive two arguments; `a!` gives (`NULL`,`0`) for `nil` |
/// | `f`  | {Float}        | {mrb_float}       |                                                    |
/// | `i`  | {Integer}      | {mrb_int}         |                                                    |
/// | `b`  | boolean        | {mrb_bool}        |                                                    |
/// | `n`  | {Symbol}       | {mrb_sym}         |                                                    |
/// | `&`  | block          | {mrb_value}       |                                                    |
/// | `*`  | rest arguments | {mrb_value} *, {mrb_int} | Receive the rest of arguments as an array.  |
/// | &vert; | optional     |                   | After this spec following specs would be optional. |
/// | `?`  | optional given | {mrb_bool}        | `TRUE` if preceding argument is given. Used to check optional argument is given. |
///
/// @see mrb_get_args
pub type mrb_args_format = *const ::std::os::raw::c_char;
extern "C" {
    /// Retrieve arguments from mrb_state.
    ///
    /// When applicable, implicit conversions (such as `to_str`, `to_ary`, `to_hash`) are
    /// applied to received arguments.
    /// Used inside a function of mrb_func_t type.
    ///
    /// @param mrb The current MRuby state.
    /// @param format [mrb_args_format] is a list of format specifiers
    /// @param ... The passing variadic arguments must be a pointer of retrieving type.
    /// @return the number of arguments retrieved.
    /// @see mrb_args_format
    pub fn mrb_get_args(mrb: *mut mrb_state, format: mrb_args_format, ...) -> mrb_int;
}
extern "C" {
    /// Retrieve number of arguments from mrb_state.
    ///
    /// Correctly handles *splat arguments.
    pub fn mrb_get_argc(mrb: *mut mrb_state) -> mrb_int;
}
extern "C" {
    pub fn mrb_get_argv(mrb: *mut mrb_state) -> *mut mrb_value;
}
extern "C" {
    /// Call existing ruby functions.
    ///
    /// #include <stdio.h>
    /// #include <mruby.h>
    /// #include "mruby/compile.h"
    ///
    /// int
    /// main()
    /// {
    /// mrb_int i = 99;
    /// mrb_state *mrb = mrb_open();
    ///
    /// if (!mrb) { }
    /// FILE *fp = fopen("test.rb","r");
    /// mrb_value obj = mrb_load_file(mrb,fp);
    /// mrb_funcall(mrb, obj, "method_name", 1, mrb_fixnum_value(i));
    /// fclose(fp);
    /// mrb_close(mrb);
    /// }
    /// @param [mrb_state*] mrb_state* The current mruby state.
    /// @param [mrb_value] mrb_value A reference to an mruby value.
    /// @param [const char*] const char* The name of the method.
    /// @param [mrb_int] mrb_int The number of arguments the method has.
    /// @param [...] ... Variadic values(not type safe!).
    /// @return [mrb_value] mrb_value mruby function value.
    pub fn mrb_funcall(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_int,
        ...
    ) -> mrb_value;
}
extern "C" {
    /// Call existing ruby functions. This is basically the type safe version of mrb_funcall.
    ///
    /// #include <stdio.h>
    /// #include <mruby.h>
    /// #include "mruby/compile.h"
    /// int
    /// main()
    /// {
    /// mrb_int i = 99;
    /// mrb_state *mrb = mrb_open();
    ///
    /// if (!mrb) { }
    /// mrb_sym m_sym = mrb_intern_lit(mrb, "method_name"); // Symbol for method.
    ///
    /// FILE *fp = fopen("test.rb","r");
    /// mrb_value obj = mrb_load_file(mrb,fp);
    /// mrb_funcall_argv(mrb, obj, m_sym, 1, &obj); // Calling ruby function from test.rb.
    /// fclose(fp);
    /// mrb_close(mrb);
    /// }
    /// @param [mrb_state*] mrb_state* The current mruby state.
    /// @param [mrb_value] mrb_value A reference to an mruby value.
    /// @param [mrb_sym] mrb_sym The symbol representing the method.
    /// @param [mrb_int] mrb_int The number of arguments the method has.
    /// @param [const mrb_value*] mrb_value* Pointer to the object.
    /// @return [mrb_value] mrb_value mruby function value.
    /// @see mrb_funcall
    pub fn mrb_funcall_argv(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: mrb_sym,
        arg4: mrb_int,
        arg5: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    /// Call existing ruby functions with a block.
    pub fn mrb_funcall_with_block(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: mrb_sym,
        arg4: mrb_int,
        arg5: *const mrb_value,
        arg6: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    /// Create a symbol
    ///
    /// # Ruby style:
    /// :pizza # => :pizza
    ///
    /// // C style:
    /// mrb_sym m_sym = mrb_intern_lit(mrb, "pizza"); //  => :pizza
    /// @param [mrb_state*] mrb_state* The current mruby state.
    /// @param [const char*] const char* The name of the method.
    /// @return [mrb_sym] mrb_sym A symbol.
    pub fn mrb_intern_cstr(arg1: *mut mrb_state, arg2: *const ::std::os::raw::c_char) -> mrb_sym;
}
extern "C" {
    pub fn mrb_intern(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_sym;
}
extern "C" {
    pub fn mrb_intern_static(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_sym;
}
extern "C" {
    pub fn mrb_intern_str(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_sym;
}
extern "C" {
    pub fn mrb_check_intern_cstr(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_intern(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_intern_str(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_sym2name(arg1: *mut mrb_state, arg2: mrb_sym) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_sym2name_len(
        arg1: *mut mrb_state,
        arg2: mrb_sym,
        arg3: *mut mrb_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_sym2str(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_malloc(arg1: *mut mrb_state, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_calloc(
        arg1: *mut mrb_state,
        arg2: usize,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_realloc(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_realloc_simple(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_malloc_simple(arg1: *mut mrb_state, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_obj_alloc(arg1: *mut mrb_state, arg2: mrb_vtype, arg3: *mut RClass) -> *mut RBasic;
}
extern "C" {
    pub fn mrb_free(arg1: *mut mrb_state, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mrb_str_new(
        mrb: *mut mrb_state,
        p: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    /// Turns a C string into a Ruby string value.
    pub fn mrb_str_new_cstr(arg1: *mut mrb_state, arg2: *const ::std::os::raw::c_char)
        -> mrb_value;
}
extern "C" {
    pub fn mrb_str_new_static(
        mrb: *mut mrb_state,
        p: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    /// Creates new mrb_state.
    ///
    /// @return
    /// Pointer to the newly created mrb_state.
    pub fn mrb_open() -> *mut mrb_state;
}
extern "C" {
    /// Create new mrb_state with custom allocators.
    ///
    /// @param f
    /// Reference to the allocation function.
    /// @param ud
    /// User data will be passed to custom allocator f.
    /// If user data isn't required just pass NULL.
    /// @return
    /// Pointer to the newly created mrb_state.
    pub fn mrb_open_allocf(f: mrb_allocf, ud: *mut ::std::os::raw::c_void) -> *mut mrb_state;
}
extern "C" {
    /// Create new mrb_state with just the MRuby core
    ///
    /// @param f
    /// Reference to the allocation function.
    /// Use mrb_default_allocf for the default
    /// @param ud
    /// User data will be passed to custom allocator f.
    /// If user data isn't required just pass NULL.
    /// @return
    /// Pointer to the newly created mrb_state.
    pub fn mrb_open_core(f: mrb_allocf, ud: *mut ::std::os::raw::c_void) -> *mut mrb_state;
}
extern "C" {
    /// Closes and frees a mrb_state.
    ///
    /// @param mrb
    /// Pointer to the mrb_state to be closed.
    pub fn mrb_close(mrb: *mut mrb_state);
}
extern "C" {
    /// The default allocation function.
    ///
    /// @see mrb_allocf
    pub fn mrb_default_allocf(
        arg1: *mut mrb_state,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_top_self(arg1: *mut mrb_state) -> mrb_value;
}
extern "C" {
    pub fn mrb_run(arg1: *mut mrb_state, arg2: *mut RProc, arg3: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_top_run(
        arg1: *mut mrb_state,
        arg2: *mut RProc,
        arg3: mrb_value,
        arg4: ::std::os::raw::c_uint,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_run(
        arg1: *mut mrb_state,
        arg2: *mut RProc,
        arg3: mrb_value,
        arg4: ::std::os::raw::c_uint,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_exec(arg1: *mut mrb_state, arg2: *mut RProc, arg3: *mut mrb_code) -> mrb_value;
}
extern "C" {
    pub fn mrb_p(arg1: *mut mrb_state, arg2: mrb_value);
}
extern "C" {
    pub fn mrb_obj_id(obj: mrb_value) -> mrb_int;
}
extern "C" {
    pub fn mrb_obj_to_sym(mrb: *mut mrb_state, name: mrb_value) -> mrb_sym;
}
extern "C" {
    pub fn mrb_obj_eq(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_value) -> mrb_bool;
}
extern "C" {
    pub fn mrb_obj_equal(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_value) -> mrb_bool;
}
extern "C" {
    pub fn mrb_equal(mrb: *mut mrb_state, obj1: mrb_value, obj2: mrb_value) -> mrb_bool;
}
extern "C" {
    pub fn mrb_convert_to_integer(mrb: *mut mrb_state, val: mrb_value, base: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_Integer(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_Float(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_inspect(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_eql(mrb: *mut mrb_state, obj1: mrb_value, obj2: mrb_value) -> mrb_bool;
}
extern "C" {
    pub fn mrb_garbage_collect(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_full_gc(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_incremental_gc(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_gc_mark(arg1: *mut mrb_state, arg2: *mut RBasic);
}
extern "C" {
    pub fn mrb_field_write_barrier(arg1: *mut mrb_state, arg2: *mut RBasic, arg3: *mut RBasic);
}
extern "C" {
    pub fn mrb_write_barrier(arg1: *mut mrb_state, arg2: *mut RBasic);
}
extern "C" {
    pub fn mrb_check_convert_type(
        mrb: *mut mrb_state,
        val: mrb_value,
        type_: mrb_vtype,
        tname: *const ::std::os::raw::c_char,
        method: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_any_to_s(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_classname(mrb: *mut mrb_state, obj: mrb_value) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_obj_class(mrb: *mut mrb_state, obj: mrb_value) -> *mut RClass;
}
extern "C" {
    pub fn mrb_class_path(mrb: *mut mrb_state, c: *mut RClass) -> mrb_value;
}
extern "C" {
    pub fn mrb_convert_type(
        mrb: *mut mrb_state,
        val: mrb_value,
        type_: mrb_vtype,
        tname: *const ::std::os::raw::c_char,
        method: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_is_kind_of(mrb: *mut mrb_state, obj: mrb_value, c: *mut RClass) -> mrb_bool;
}
extern "C" {
    pub fn mrb_obj_inspect(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_clone(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_exc_new(
        mrb: *mut mrb_state,
        c: *mut RClass,
        ptr: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_exc_raise(mrb: *mut mrb_state, exc: mrb_value);
}
extern "C" {
    pub fn mrb_raise(mrb: *mut mrb_state, c: *mut RClass, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mrb_raisef(mrb: *mut mrb_state, c: *mut RClass, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn mrb_name_error(
        mrb: *mut mrb_state,
        id: mrb_sym,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn mrb_warn(mrb: *mut mrb_state, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn mrb_bug(mrb: *mut mrb_state, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn mrb_print_backtrace(mrb: *mut mrb_state);
}
extern "C" {
    pub fn mrb_print_error(mrb: *mut mrb_state);
}
extern "C" {
    pub fn mrb_yield(mrb: *mut mrb_state, b: mrb_value, arg: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_yield_argv(
        mrb: *mut mrb_state,
        b: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_yield_with_class(
        mrb: *mut mrb_state,
        b: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
        self_: mrb_value,
        c: *mut RClass,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_yield_cont(
        mrb: *mut mrb_state,
        b: mrb_value,
        self_: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_gc_protect(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    pub fn mrb_gc_register(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    pub fn mrb_gc_unregister(mrb: *mut mrb_state, obj: mrb_value);
}
extern "C" {
    pub fn mrb_to_int(mrb: *mut mrb_state, val: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_type(mrb: *mut mrb_state, x: mrb_value, t: mrb_vtype);
}
pub const call_type_CALL_PUBLIC: call_type = 0;
pub const call_type_CALL_FCALL: call_type = 1;
pub const call_type_CALL_VCALL: call_type = 2;
pub const call_type_CALL_TYPE_MAX: call_type = 3;
pub type call_type = u32;
extern "C" {
    pub fn mrb_define_alias(
        mrb: *mut mrb_state,
        klass: *mut RClass,
        name1: *const ::std::os::raw::c_char,
        name2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mrb_class_name(mrb: *mut mrb_state, klass: *mut RClass)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_define_global_const(
        mrb: *mut mrb_state,
        name: *const ::std::os::raw::c_char,
        val: mrb_value,
    );
}
extern "C" {
    pub fn mrb_attr_get(mrb: *mut mrb_state, obj: mrb_value, id: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_respond_to(mrb: *mut mrb_state, obj: mrb_value, mid: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_obj_is_instance_of(mrb: *mut mrb_state, obj: mrb_value, c: *mut RClass) -> mrb_bool;
}
extern "C" {
    pub fn mrb_func_basic_p(
        mrb: *mut mrb_state,
        obj: mrb_value,
        mid: mrb_sym,
        func: mrb_func_t,
    ) -> mrb_bool;
}
extern "C" {
    pub fn mrb_fiber_resume(
        mrb: *mut mrb_state,
        fib: mrb_value,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_fiber_yield(mrb: *mut mrb_state, argc: mrb_int, argv: *const mrb_value)
        -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_pool {
    _unused: [u8; 0],
}
extern "C" {
    pub fn mrb_pool_open(arg1: *mut mrb_state) -> *mut mrb_pool;
}
extern "C" {
    pub fn mrb_pool_close(arg1: *mut mrb_pool);
}
extern "C" {
    pub fn mrb_pool_alloc(arg1: *mut mrb_pool, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_pool_realloc(
        arg1: *mut mrb_pool,
        arg2: *mut ::std::os::raw::c_void,
        oldlen: usize,
        newlen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_pool_can_realloc(
        arg1: *mut mrb_pool,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> mrb_bool;
}
extern "C" {
    pub fn mrb_alloca(mrb: *mut mrb_state, arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_state_atexit(mrb: *mut mrb_state, func: mrb_atexit_func);
}
extern "C" {
    pub fn mrb_show_version(mrb: *mut mrb_state);
}
extern "C" {
    pub fn mrb_show_copyright(mrb: *mut mrb_state);
}
extern "C" {
    pub fn mrb_format(mrb: *mut mrb_state, format: *const ::std::os::raw::c_char, ...)
        -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrbc_context {
    pub syms: *mut mrb_sym,
    pub slen: ::std::os::raw::c_int,
    pub filename: *mut ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_short,
    pub partial_hook: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mrb_parser_state) -> ::std::os::raw::c_int,
    >,
    pub partial_data: *mut ::std::os::raw::c_void,
    pub target_class: *mut RClass,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub parser_nerr: usize,
}
#[test]
fn bindgen_test_layout_mrbc_context() {
    assert_eq!(
        ::std::mem::size_of::<mrbc_context>(),
        72usize,
        concat!("Size of: ", stringify!(mrbc_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mrbc_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mrbc_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).syms as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(syms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).slen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(slen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).filename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).lineno as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).partial_hook as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(partial_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).partial_data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(partial_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).target_class as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(target_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrbc_context>())).parser_nerr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrbc_context),
            "::",
            stringify!(parser_nerr)
        )
    );
}
impl mrbc_context {
    #[inline]
    pub fn capture_errors(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_capture_errors(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dump_result(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dump_result(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_exec(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_exec(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keep_lv(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_keep_lv(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_optimize(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_optimize(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        capture_errors: mrb_bool,
        dump_result: mrb_bool,
        no_exec: mrb_bool,
        keep_lv: mrb_bool,
        no_optimize: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let capture_errors: u8 = unsafe { ::std::mem::transmute(capture_errors) };
            capture_errors as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dump_result: u8 = unsafe { ::std::mem::transmute(dump_result) };
            dump_result as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_exec: u8 = unsafe { ::std::mem::transmute(no_exec) };
            no_exec as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let keep_lv: u8 = unsafe { ::std::mem::transmute(keep_lv) };
            keep_lv as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let no_optimize: u8 = unsafe { ::std::mem::transmute(no_optimize) };
            no_optimize as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrbc_context_new(mrb: *mut mrb_state) -> *mut mrbc_context;
}
extern "C" {
    pub fn mrbc_context_free(mrb: *mut mrb_state, cxt: *mut mrbc_context);
}
extern "C" {
    pub fn mrbc_filename(
        mrb: *mut mrb_state,
        c: *mut mrbc_context,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrbc_partial_hook(
        mrb: *mut mrb_state,
        c: *mut mrbc_context,
        partial_hook: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut mrb_parser_state) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_ast_node {
    pub car: *mut mrb_ast_node,
    pub cdr: *mut mrb_ast_node,
    pub lineno: u16,
    pub filename_index: u16,
}
#[test]
fn bindgen_test_layout_mrb_ast_node() {
    assert_eq!(
        ::std::mem::size_of::<mrb_ast_node>(),
        24usize,
        concat!("Size of: ", stringify!(mrb_ast_node))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_ast_node>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_ast_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).car as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(car)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).cdr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(cdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).lineno as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_ast_node>())).filename_index as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_ast_node),
            "::",
            stringify!(filename_index)
        )
    );
}
pub const mrb_lex_state_enum_EXPR_BEG: mrb_lex_state_enum = 0;
pub const mrb_lex_state_enum_EXPR_END: mrb_lex_state_enum = 1;
pub const mrb_lex_state_enum_EXPR_ENDARG: mrb_lex_state_enum = 2;
pub const mrb_lex_state_enum_EXPR_ENDFN: mrb_lex_state_enum = 3;
pub const mrb_lex_state_enum_EXPR_ARG: mrb_lex_state_enum = 4;
pub const mrb_lex_state_enum_EXPR_CMDARG: mrb_lex_state_enum = 5;
pub const mrb_lex_state_enum_EXPR_MID: mrb_lex_state_enum = 6;
pub const mrb_lex_state_enum_EXPR_FNAME: mrb_lex_state_enum = 7;
pub const mrb_lex_state_enum_EXPR_DOT: mrb_lex_state_enum = 8;
pub const mrb_lex_state_enum_EXPR_CLASS: mrb_lex_state_enum = 9;
pub const mrb_lex_state_enum_EXPR_VALUE: mrb_lex_state_enum = 10;
pub const mrb_lex_state_enum_EXPR_MAX_STATE: mrb_lex_state_enum = 11;
pub type mrb_lex_state_enum = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_parser_message {
    pub lineno: ::std::os::raw::c_int,
    pub column: ::std::os::raw::c_int,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mrb_parser_message() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_message>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_parser_message))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_message>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).lineno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).column as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_message>())).message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_message),
            "::",
            stringify!(message)
        )
    );
}
pub const mrb_string_type_str_not_parsing: mrb_string_type = 0;
pub const mrb_string_type_str_squote: mrb_string_type = 1;
pub const mrb_string_type_str_dquote: mrb_string_type = 3;
pub const mrb_string_type_str_regexp: mrb_string_type = 7;
pub const mrb_string_type_str_sword: mrb_string_type = 41;
pub const mrb_string_type_str_dword: mrb_string_type = 43;
pub const mrb_string_type_str_ssym: mrb_string_type = 17;
pub const mrb_string_type_str_ssymbols: mrb_string_type = 49;
pub const mrb_string_type_str_dsymbols: mrb_string_type = 51;
pub const mrb_string_type_str_heredoc: mrb_string_type = 65;
pub const mrb_string_type_str_xquote: mrb_string_type = 131;
pub type mrb_string_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_parser_heredoc_info {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub type_: mrb_string_type,
    pub term: *const ::std::os::raw::c_char,
    pub term_len: ::std::os::raw::c_int,
    pub doc: *mut mrb_ast_node,
}
#[test]
fn bindgen_test_layout_mrb_parser_heredoc_info() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_heredoc_info>(),
        32usize,
        concat!("Size of: ", stringify!(mrb_parser_heredoc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_heredoc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_heredoc_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).term as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).term_len as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(term_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_heredoc_info>())).doc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_heredoc_info),
            "::",
            stringify!(doc)
        )
    );
}
impl mrb_parser_heredoc_info {
    #[inline]
    pub fn allow_indent(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_allow_indent(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn line_head(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_line_head(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        allow_indent: mrb_bool,
        line_head: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let allow_indent: u8 = unsafe { ::std::mem::transmute(allow_indent) };
            allow_indent as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let line_head: u8 = unsafe { ::std::mem::transmute(line_head) };
            line_head as u64
        });
        __bindgen_bitfield_unit
    }
}
/// MRuby Compiler
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_parser_state {
    pub mrb: *mut mrb_state,
    pub pool: *mut mrb_pool,
    pub cells: *mut mrb_ast_node,
    pub s: *const ::std::os::raw::c_char,
    pub send: *const ::std::os::raw::c_char,
    pub f: *mut FILE,
    pub cxt: *mut mrbc_context,
    pub filename: *const ::std::os::raw::c_char,
    pub lineno: ::std::os::raw::c_int,
    pub column: ::std::os::raw::c_int,
    pub lstate: mrb_lex_state_enum,
    pub lex_strterm: *mut mrb_ast_node,
    pub cond_stack: ::std::os::raw::c_uint,
    pub cmdarg_stack: ::std::os::raw::c_uint,
    pub paren_nest: ::std::os::raw::c_int,
    pub lpar_beg: ::std::os::raw::c_int,
    pub in_def: ::std::os::raw::c_int,
    pub in_single: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub locals: *mut mrb_ast_node,
    pub pb: *mut mrb_ast_node,
    pub tokbuf: *mut ::std::os::raw::c_char,
    pub buf: [::std::os::raw::c_char; 256usize],
    pub tidx: ::std::os::raw::c_int,
    pub tsiz: ::std::os::raw::c_int,
    pub all_heredocs: *mut mrb_ast_node,
    pub heredocs_from_nextline: *mut mrb_ast_node,
    pub parsing_heredoc: *mut mrb_ast_node,
    pub lex_strterm_before_heredoc: *mut mrb_ast_node,
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub ylval: *mut ::std::os::raw::c_void,
    pub nerr: usize,
    pub nwarn: usize,
    pub tree: *mut mrb_ast_node,
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub error_buffer: [mrb_parser_message; 10usize],
    pub warn_buffer: [mrb_parser_message; 10usize],
    pub filename_table: *mut mrb_sym,
    pub filename_table_length: usize,
    pub current_filename_index: ::std::os::raw::c_int,
    pub jmp: *mut mrb_jmpbuf,
}
#[test]
fn bindgen_test_layout_mrb_parser_state() {
    assert_eq!(
        ::std::mem::size_of::<mrb_parser_state>(),
        840usize,
        concat!("Size of: ", stringify!(mrb_parser_state))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_parser_state>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_parser_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).mrb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(mrb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).pool as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cells as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).s as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).send as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).f as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cxt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).filename as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lineno as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).column as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lstate as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lex_strterm as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lex_strterm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cond_stack as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cond_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).cmdarg_stack as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(cmdarg_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).paren_nest as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(paren_nest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).lpar_beg as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lpar_beg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).in_def as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(in_def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).in_single as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(in_single)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).locals as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(locals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).pb as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(pb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tokbuf as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tokbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).buf as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tidx as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tsiz as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tsiz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).all_heredocs as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(all_heredocs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).heredocs_from_nextline as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(heredocs_from_nextline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).parsing_heredoc as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(parsing_heredoc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).lex_strterm_before_heredoc as *const _
                as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(lex_strterm_before_heredoc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).ylval as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(ylval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).nerr as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(nerr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).nwarn as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(nwarn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).tree as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).error_buffer as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(error_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).warn_buffer as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(warn_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).filename_table as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).filename_table_length as *const _ as usize
        },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(filename_table_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_parser_state>())).current_filename_index as *const _ as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(current_filename_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_parser_state>())).jmp as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_parser_state),
            "::",
            stringify!(jmp)
        )
    );
}
impl mrb_parser_state {
    #[inline]
    pub fn cmd_start(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cmd_start(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(cmd_start: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cmd_start: u8 = unsafe { ::std::mem::transmute(cmd_start) };
            cmd_start as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn heredoc_end_now(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_heredoc_end_now(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(heredoc_end_now: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let heredoc_end_now: u8 = unsafe { ::std::mem::transmute(heredoc_end_now) };
            heredoc_end_now as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn no_optimize(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_optimize(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn capture_errors(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_3.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_capture_errors(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_3.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        no_optimize: mrb_bool,
        capture_errors: mrb_bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let no_optimize: u8 = unsafe { ::std::mem::transmute(no_optimize) };
            no_optimize as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let capture_errors: u8 = unsafe { ::std::mem::transmute(capture_errors) };
            capture_errors as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_parser_new(arg1: *mut mrb_state) -> *mut mrb_parser_state;
}
extern "C" {
    pub fn mrb_parser_free(arg1: *mut mrb_parser_state);
}
extern "C" {
    pub fn mrb_parser_parse(arg1: *mut mrb_parser_state, arg2: *mut mrbc_context);
}
extern "C" {
    pub fn mrb_parser_set_filename(
        arg1: *mut mrb_parser_state,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mrb_parser_get_filename(
        arg1: *mut mrb_parser_state,
        idx: u16,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_parse_file(
        arg1: *mut mrb_state,
        arg2: *mut FILE,
        arg3: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    pub fn mrb_parse_string(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    pub fn mrb_parse_nstring(
        arg1: *mut mrb_state,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mrbc_context,
    ) -> *mut mrb_parser_state;
}
extern "C" {
    pub fn mrb_generate_code(arg1: *mut mrb_state, arg2: *mut mrb_parser_state) -> *mut RProc;
}
extern "C" {
    pub fn mrb_load_exec(
        mrb: *mut mrb_state,
        p: *mut mrb_parser_state,
        c: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_file(arg1: *mut mrb_state, arg2: *mut FILE) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_file_cxt(
        arg1: *mut mrb_state,
        arg2: *mut FILE,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_string(mrb: *mut mrb_state, s: *const ::std::os::raw::c_char) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_nstring(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_string_cxt(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_nstring_cxt(
        mrb: *mut mrb_state,
        s: *const ::std::os::raw::c_char,
        len: usize,
        cxt: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
/// khash definitions used in mruby's hash table.
pub type khint_t = u32;
pub type khiter_t = khint_t;
extern "C" {
    #[link_name = "\u{1}__m_empty"]
    pub static mut __m_empty: [u8; 4usize];
}
extern "C" {
    #[link_name = "\u{1}__m_del"]
    pub static mut __m_del: [u8; 4usize];
}
extern "C" {
    #[link_name = "\u{1}__m_either"]
    pub static mut __m_either: [u8; 4usize];
}
pub type kh_cstr_t = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RHash {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
    pub ht: *mut kh_ht,
}
#[test]
fn bindgen_test_layout_RHash() {
    assert_eq!(
        ::std::mem::size_of::<RHash>(),
        40usize,
        concat!("Size of: ", stringify!(RHash))
    );
    assert_eq!(
        ::std::mem::align_of::<RHash>(),
        8usize,
        concat!("Alignment of ", stringify!(RHash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RHash>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RHash), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RHash>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RHash),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RHash>())).iv as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(RHash), "::", stringify!(iv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RHash>())).ht as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(RHash), "::", stringify!(ht))
    );
}
impl RHash {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_hash_new_capa(arg1: *mut mrb_state, arg2: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_hash_new(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    pub fn mrb_hash_set(mrb: *mut mrb_state, hash: mrb_value, key: mrb_value, val: mrb_value);
}
extern "C" {
    pub fn mrb_hash_get(mrb: *mut mrb_state, hash: mrb_value, key: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_hash_fetch(
        mrb: *mut mrb_state,
        hash: mrb_value,
        key: mrb_value,
        def: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_hash_delete_key(mrb: *mut mrb_state, hash: mrb_value, key: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_hash_keys(mrb: *mut mrb_state, hash: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_hash_type(mrb: *mut mrb_state, hash: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_hash_empty_p(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_hash_values(mrb: *mut mrb_state, hash: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_hash_clear(mrb: *mut mrb_state, hash: mrb_value) -> mrb_value;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_hash_value {
    pub v: mrb_value,
    pub n: mrb_int,
}
#[test]
fn bindgen_test_layout_mrb_hash_value() {
    assert_eq!(
        ::std::mem::size_of::<mrb_hash_value>(),
        24usize,
        concat!("Size of: ", stringify!(mrb_hash_value))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_hash_value>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_hash_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_hash_value>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_hash_value),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_hash_value>())).n as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_hash_value),
            "::",
            stringify!(n)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kh_ht {
    pub n_buckets: khint_t,
    pub size: khint_t,
    pub n_occupied: khint_t,
    pub ed_flags: *mut u8,
    pub keys: *mut mrb_value,
    pub vals: *mut mrb_hash_value,
}
#[test]
fn bindgen_test_layout_kh_ht() {
    assert_eq!(
        ::std::mem::size_of::<kh_ht>(),
        40usize,
        concat!("Size of: ", stringify!(kh_ht))
    );
    assert_eq!(
        ::std::mem::align_of::<kh_ht>(),
        8usize,
        concat!("Alignment of ", stringify!(kh_ht))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_ht>())).n_buckets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_ht),
            "::",
            stringify!(n_buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_ht>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_ht),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_ht>())).n_occupied as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_ht),
            "::",
            stringify!(n_occupied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_ht>())).ed_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_ht),
            "::",
            stringify!(ed_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_ht>())).keys as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_ht),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_ht>())).vals as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_ht),
            "::",
            stringify!(vals)
        )
    );
}
pub type kh_ht_t = kh_ht;
extern "C" {
    pub fn kh_alloc_ht(mrb: *mut mrb_state, h: *mut kh_ht_t);
}
extern "C" {
    pub fn kh_init_ht_size(mrb: *mut mrb_state, size: khint_t) -> *mut kh_ht_t;
}
extern "C" {
    pub fn kh_init_ht(mrb: *mut mrb_state) -> *mut kh_ht_t;
}
extern "C" {
    pub fn kh_destroy_ht(mrb: *mut mrb_state, h: *mut kh_ht_t);
}
extern "C" {
    pub fn kh_clear_ht(mrb: *mut mrb_state, h: *mut kh_ht_t);
}
extern "C" {
    pub fn kh_get_ht(mrb: *mut mrb_state, h: *mut kh_ht_t, key: mrb_value) -> khint_t;
}
extern "C" {
    pub fn kh_put_ht(
        mrb: *mut mrb_state,
        h: *mut kh_ht_t,
        key: mrb_value,
        ret: *mut ::std::os::raw::c_int,
    ) -> khint_t;
}
extern "C" {
    pub fn kh_resize_ht(mrb: *mut mrb_state, h: *mut kh_ht_t, new_n_buckets: khint_t);
}
extern "C" {
    pub fn kh_del_ht(mrb: *mut mrb_state, h: *mut kh_ht_t, x: khint_t);
}
extern "C" {
    pub fn kh_copy_ht(mrb: *mut mrb_state, h: *mut kh_ht_t) -> *mut kh_ht_t;
}
extern "C" {
    pub fn mrb_hash_tbl(mrb: *mut mrb_state, hash: mrb_value) -> *mut kh_ht;
}
extern "C" {
    pub fn mrb_gc_mark_hash(arg1: *mut mrb_state, arg2: *mut RHash);
}
extern "C" {
    pub fn mrb_gc_mark_hash_size(arg1: *mut mrb_state, arg2: *mut RHash) -> usize;
}
extern "C" {
    pub fn mrb_gc_free_hash(arg1: *mut mrb_state, arg2: *mut RHash);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RException {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
}
#[test]
fn bindgen_test_layout_RException() {
    assert_eq!(
        ::std::mem::size_of::<RException>(),
        32usize,
        concat!("Size of: ", stringify!(RException))
    );
    assert_eq!(
        ::std::mem::align_of::<RException>(),
        8usize,
        concat!("Alignment of ", stringify!(RException))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RException>())).c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RException),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RException>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RException),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RException>())).iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RException),
            "::",
            stringify!(iv)
        )
    );
}
impl RException {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_sys_fail(mrb: *mut mrb_state, mesg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mrb_exc_new_str(mrb: *mut mrb_state, c: *mut RClass, str: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_make_exception(
        mrb: *mut mrb_state,
        argc: mrb_int,
        argv: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_exc_backtrace(mrb: *mut mrb_state, exc: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_get_backtrace(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    pub fn mrb_no_method_error(
        mrb: *mut mrb_state,
        id: mrb_sym,
        args: mrb_value,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn mrb_f_raise(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RBreak {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub proc_: *mut RProc,
    pub val: mrb_value,
}
#[test]
fn bindgen_test_layout_RBreak() {
    assert_eq!(
        ::std::mem::size_of::<RBreak>(),
        48usize,
        concat!("Size of: ", stringify!(RBreak))
    );
    assert_eq!(
        ::std::mem::align_of::<RBreak>(),
        8usize,
        concat!("Alignment of ", stringify!(RBreak))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RBreak), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RBreak),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).proc_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RBreak),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RBreak>())).val as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RBreak),
            "::",
            stringify!(val)
        )
    );
}
impl RBreak {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    /// Protect
    ///
    /// @mrbgem mruby-error
    pub fn mrb_protect(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        data: mrb_value,
        state: *mut mrb_bool,
    ) -> mrb_value;
}
extern "C" {
    /// Ensure
    ///
    /// @mrbgem mruby-error
    pub fn mrb_ensure(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        b_data: mrb_value,
        ensure: mrb_func_t,
        e_data: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    /// Rescue
    ///
    /// @mrbgem mruby-error
    pub fn mrb_rescue(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        b_data: mrb_value,
        rescue: mrb_func_t,
        r_data: mrb_value,
    ) -> mrb_value;
}
extern "C" {
    /// Rescue exception
    ///
    /// @mrbgem mruby-error
    pub fn mrb_rescue_exceptions(
        mrb: *mut mrb_state,
        body: mrb_func_t,
        b_data: mrb_value,
        rescue: mrb_func_t,
        r_data: mrb_value,
        len: mrb_int,
        classes: *mut *mut RClass,
    ) -> mrb_value;
}
extern "C" {
    #[link_name = "\u{1}mrb_digitmap"]
    pub static mut mrb_digitmap: [::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub as_: RString__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1 {
    pub heap: RString__bindgen_ty_1__bindgen_ty_1,
    pub ary: [::std::os::raw::c_char; 24usize],
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString__bindgen_ty_1__bindgen_ty_1 {
    pub len: mrb_int,
    pub aux: RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ptr: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: mrb_int,
    pub shared: *mut mrb_shared_string,
    pub fshared: *mut RString,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).capa
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(capa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).shared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).fshared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(fshared)
        )
    );
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RString__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).aux as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RString__bindgen_ty_1__bindgen_ty_1>())).ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RString__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RString__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString__bindgen_ty_1>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString__bindgen_ty_1>())).ary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RString__bindgen_ty_1),
            "::",
            stringify!(ary)
        )
    );
}
#[test]
fn bindgen_test_layout_RString() {
    assert_eq!(
        ::std::mem::size_of::<RString>(),
        48usize,
        concat!("Size of: ", stringify!(RString))
    );
    assert_eq!(
        ::std::mem::align_of::<RString>(),
        8usize,
        concat!("Alignment of ", stringify!(RString))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RString>())).as_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RString),
            "::",
            stringify!(as_)
        )
    );
}
impl RString {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_str_strlen(arg1: *mut mrb_state, arg2: *mut RString) -> mrb_int;
}
extern "C" {
    pub fn mrb_gc_free_str(arg1: *mut mrb_state, arg2: *mut RString);
}
extern "C" {
    pub fn mrb_str_modify(arg1: *mut mrb_state, arg2: *mut RString);
}
extern "C" {
    pub fn mrb_str_index(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: *const ::std::os::raw::c_char,
        arg4: mrb_int,
        arg5: mrb_int,
    ) -> mrb_int;
}
extern "C" {
    pub fn mrb_str_concat(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_value);
}
extern "C" {
    pub fn mrb_str_plus(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ptr_to_str(arg1: *mut mrb_state, arg2: *mut ::std::os::raw::c_void) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_as_string(mrb: *mut mrb_state, obj: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_resize(mrb: *mut mrb_state, str: mrb_value, len: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_substr(
        mrb: *mut mrb_state,
        str: mrb_value,
        beg: mrb_int,
        len: mrb_int,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_string_type(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_check_string_type(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_new_capa(mrb: *mut mrb_state, capa: usize) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_buf_new(mrb: *mut mrb_state, capa: usize) -> mrb_value;
}
extern "C" {
    pub fn mrb_string_value_cstr(
        mrb: *mut mrb_state,
        ptr: *mut mrb_value,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_string_value_ptr(
        mrb: *mut mrb_state,
        str: mrb_value,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_string_value_len(mrb: *mut mrb_state, str: mrb_value) -> mrb_int;
}
extern "C" {
    pub fn mrb_str_dup(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_intern(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_to_inum(
        mrb: *mut mrb_state,
        str: mrb_value,
        base: mrb_int,
        badcheck: mrb_bool,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_to_dbl(mrb: *mut mrb_state, str: mrb_value, badcheck: mrb_bool) -> f64;
}
extern "C" {
    pub fn mrb_str_to_str(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_equal(mrb: *mut mrb_state, str1: mrb_value, str2: mrb_value) -> mrb_bool;
}
extern "C" {
    pub fn mrb_str_cat(
        mrb: *mut mrb_state,
        str: mrb_value,
        ptr: *const ::std::os::raw::c_char,
        len: usize,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_cat_cstr(
        mrb: *mut mrb_state,
        str: mrb_value,
        ptr: *const ::std::os::raw::c_char,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_cat_str(mrb: *mut mrb_state, str: mrb_value, str2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_append(mrb: *mut mrb_state, str: mrb_value, str2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_cmp(
        mrb: *mut mrb_state,
        str1: mrb_value,
        str2: mrb_value,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrb_str_to_cstr(mrb: *mut mrb_state, str: mrb_value) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_str_pool(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_hash(mrb: *mut mrb_state, str: mrb_value) -> u32;
}
extern "C" {
    pub fn mrb_str_dump(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_str_inspect(mrb: *mut mrb_state, str: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_noregexp(mrb: *mut mrb_state, self_: mrb_value);
}
extern "C" {
    pub fn mrb_regexp_check(mrb: *mut mrb_state, obj: mrb_value);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_shared_array {
    pub refcnt: ::std::os::raw::c_int,
    pub len: mrb_int,
    pub ptr: *mut mrb_value,
}
#[test]
fn bindgen_test_layout_mrb_shared_array() {
    assert_eq!(
        ::std::mem::size_of::<mrb_shared_array>(),
        24usize,
        concat!("Size of: ", stringify!(mrb_shared_array))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_shared_array>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_shared_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_shared_array>())).refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_shared_array),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_shared_array>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_shared_array),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_shared_array>())).ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_shared_array),
            "::",
            stringify!(ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub as_: RArray__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1 {
    pub heap: RArray__bindgen_ty_1__bindgen_ty_1,
    pub embed: [mrb_value; 1usize],
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray__bindgen_ty_1__bindgen_ty_1 {
    pub len: mrb_int,
    pub aux: RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ptr: *mut mrb_value,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: mrb_int,
    pub shared: *mut mrb_shared_array,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).capa
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(capa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>())).shared
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(shared)
        )
    );
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RArray__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).aux as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aux)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RArray__bindgen_ty_1__bindgen_ty_1>())).ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RArray__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RArray__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray__bindgen_ty_1>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray__bindgen_ty_1>())).embed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray__bindgen_ty_1),
            "::",
            stringify!(embed)
        )
    );
}
#[test]
fn bindgen_test_layout_RArray() {
    assert_eq!(
        ::std::mem::size_of::<RArray>(),
        48usize,
        concat!("Size of: ", stringify!(RArray))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray>(),
        8usize,
        concat!("Alignment of ", stringify!(RArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RArray), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RArray>())).as_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RArray),
            "::",
            stringify!(as_)
        )
    );
}
impl RArray {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_ary_decref(arg1: *mut mrb_state, arg2: *mut mrb_shared_array);
}
extern "C" {
    pub fn mrb_ary_modify(arg1: *mut mrb_state, arg2: *mut RArray);
}
extern "C" {
    pub fn mrb_ary_new_capa(arg1: *mut mrb_state, arg2: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_new(mrb: *mut mrb_state) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_new_from_values(
        mrb: *mut mrb_state,
        size: mrb_int,
        vals: *const mrb_value,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_assoc_new(mrb: *mut mrb_state, car: mrb_value, cdr: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_concat(mrb: *mut mrb_state, self_: mrb_value, other: mrb_value);
}
extern "C" {
    pub fn mrb_ary_splat(mrb: *mut mrb_state, value: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_push(mrb: *mut mrb_state, array: mrb_value, value: mrb_value);
}
extern "C" {
    pub fn mrb_ary_pop(mrb: *mut mrb_state, ary: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_ref(mrb: *mut mrb_state, ary: mrb_value, n: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_set(mrb: *mut mrb_state, ary: mrb_value, n: mrb_int, val: mrb_value);
}
extern "C" {
    pub fn mrb_ary_replace(mrb: *mut mrb_state, self_: mrb_value, other: mrb_value);
}
extern "C" {
    pub fn mrb_check_array_type(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_unshift(mrb: *mut mrb_state, self_: mrb_value, item: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_entry(ary: mrb_value, offset: mrb_int) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_shift(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_clear(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_join(mrb: *mut mrb_state, ary: mrb_value, sep: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_ary_resize(mrb: *mut mrb_state, ary: mrb_value, new_len: mrb_int) -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RClass {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
    pub mt: *mut kh_mt,
    pub super_: *mut RClass,
}
#[test]
fn bindgen_test_layout_RClass() {
    assert_eq!(
        ::std::mem::size_of::<RClass>(),
        48usize,
        concat!("Size of: ", stringify!(RClass))
    );
    assert_eq!(
        ::std::mem::align_of::<RClass>(),
        8usize,
        concat!("Alignment of ", stringify!(RClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RClass), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).mt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(mt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RClass>())).super_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RClass),
            "::",
            stringify!(super_)
        )
    );
}
impl RClass {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_define_class_id(
        arg1: *mut mrb_state,
        arg2: mrb_sym,
        arg3: *mut RClass,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_define_module_id(arg1: *mut mrb_state, arg2: mrb_sym) -> *mut RClass;
}
extern "C" {
    pub fn mrb_vm_define_class(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: mrb_value,
        arg4: mrb_sym,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_vm_define_module(
        arg1: *mut mrb_state,
        arg2: mrb_value,
        arg3: mrb_sym,
    ) -> *mut RClass;
}
extern "C" {
    pub fn mrb_define_method_raw(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: mrb_sym,
        arg4: mrb_method_t,
    );
}
extern "C" {
    pub fn mrb_define_method_id(
        mrb: *mut mrb_state,
        c: *mut RClass,
        mid: mrb_sym,
        func: mrb_func_t,
        aspec: mrb_aspec,
    );
}
extern "C" {
    pub fn mrb_alias_method(mrb: *mut mrb_state, c: *mut RClass, a: mrb_sym, b: mrb_sym);
}
extern "C" {
    pub fn mrb_method_search_vm(
        arg1: *mut mrb_state,
        arg2: *mut *mut RClass,
        arg3: mrb_sym,
    ) -> mrb_method_t;
}
extern "C" {
    pub fn mrb_method_search(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: mrb_sym,
    ) -> mrb_method_t;
}
extern "C" {
    pub fn mrb_class_real(cl: *mut RClass) -> *mut RClass;
}
extern "C" {
    pub fn mrb_class_name_class(
        arg1: *mut mrb_state,
        arg2: *mut RClass,
        arg3: *mut RClass,
        arg4: mrb_sym,
    );
}
extern "C" {
    pub fn mrb_class_find_path(arg1: *mut mrb_state, arg2: *mut RClass) -> mrb_value;
}
extern "C" {
    pub fn mrb_gc_mark_mt(arg1: *mut mrb_state, arg2: *mut RClass);
}
extern "C" {
    pub fn mrb_gc_mark_mt_size(arg1: *mut mrb_state, arg2: *mut RClass) -> usize;
}
extern "C" {
    pub fn mrb_gc_free_mt(arg1: *mut mrb_state, arg2: *mut RClass);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_range_edges {
    pub beg: mrb_value,
    pub end: mrb_value,
}
#[test]
fn bindgen_test_layout_mrb_range_edges() {
    assert_eq!(
        ::std::mem::size_of::<mrb_range_edges>(),
        32usize,
        concat!("Size of: ", stringify!(mrb_range_edges))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_range_edges>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_range_edges))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_range_edges>())).beg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_range_edges),
            "::",
            stringify!(beg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_range_edges>())).end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_range_edges),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RRange {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub edges: *mut mrb_range_edges,
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_RRange() {
    assert_eq!(
        ::std::mem::size_of::<RRange>(),
        40usize,
        concat!("Size of: ", stringify!(RRange))
    );
    assert_eq!(
        ::std::mem::align_of::<RRange>(),
        8usize,
        concat!("Alignment of ", stringify!(RRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RRange>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RRange), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RRange>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RRange),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RRange>())).edges as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RRange),
            "::",
            stringify!(edges)
        )
    );
}
impl RRange {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn excl(&self) -> mrb_bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_excl(&mut self, val: mrb_bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(excl: mrb_bool) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let excl: u8 = unsafe { ::std::mem::transmute(excl) };
            excl as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_range_ptr(mrb: *mut mrb_state, v: mrb_value) -> *mut RRange;
}
extern "C" {
    pub fn mrb_range_new(
        mrb: *mut mrb_state,
        start: mrb_value,
        end: mrb_value,
        exclude: mrb_bool,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_range_beg_len(
        mrb: *mut mrb_state,
        range: mrb_value,
        begp: *mut mrb_int,
        lenp: *mut mrb_int,
        len: mrb_int,
        trunc: mrb_bool,
    ) -> mrb_int;
}
extern "C" {
    pub fn mrb_get_values_at(
        mrb: *mut mrb_state,
        obj: mrb_value,
        olen: mrb_int,
        argc: mrb_int,
        argv: *const mrb_value,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_int) -> mrb_value,
        >,
    ) -> mrb_value;
}
pub const irep_pool_type_IREP_TT_STRING: irep_pool_type = 0;
pub const irep_pool_type_IREP_TT_FIXNUM: irep_pool_type = 1;
pub const irep_pool_type_IREP_TT_FLOAT: irep_pool_type = 2;
pub type irep_pool_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_locals {
    pub name: mrb_sym,
    pub r: u16,
}
#[test]
fn bindgen_test_layout_mrb_locals() {
    assert_eq!(
        ::std::mem::size_of::<mrb_locals>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_locals))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_locals>(),
        4usize,
        concat!("Alignment of ", stringify!(mrb_locals))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_locals>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_locals),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_locals>())).r as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_locals),
            "::",
            stringify!(r)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_irep {
    pub nlocals: u16,
    pub nregs: u16,
    pub flags: u8,
    pub iseq: *mut mrb_code,
    pub pool: *mut mrb_value,
    pub syms: *mut mrb_sym,
    pub reps: *mut *mut mrb_irep,
    pub lv: *mut mrb_locals,
    pub own_filename: mrb_bool,
    pub filename: *const ::std::os::raw::c_char,
    pub lines: *mut u16,
    pub debug_info: *mut mrb_irep_debug_info,
    pub ilen: ::std::os::raw::c_int,
    pub plen: ::std::os::raw::c_int,
    pub slen: ::std::os::raw::c_int,
    pub rlen: ::std::os::raw::c_int,
    pub refcnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mrb_irep() {
    assert_eq!(
        ::std::mem::size_of::<mrb_irep>(),
        104usize,
        concat!("Size of: ", stringify!(mrb_irep))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_irep>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_irep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).nlocals as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(nlocals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).nregs as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(nregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).iseq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(iseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).pool as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).syms as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(syms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).reps as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(reps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).lv as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(lv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).own_filename as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(own_filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).filename as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).lines as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).debug_info as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(debug_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).ilen as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(ilen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).plen as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(plen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).slen as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(slen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).rlen as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(rlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep>())).refcnt as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep),
            "::",
            stringify!(refcnt)
        )
    );
}
extern "C" {
    pub fn mrb_add_irep(mrb: *mut mrb_state) -> *mut mrb_irep;
}
extern "C" {
    pub fn mrb_load_irep(arg1: *mut mrb_state, arg2: *const u8) -> mrb_value;
}
extern "C" {
    pub fn mrb_load_irep_cxt(
        arg1: *mut mrb_state,
        arg2: *const u8,
        arg3: *mut mrbc_context,
    ) -> mrb_value;
}
extern "C" {
    pub fn mrb_irep_free(arg1: *mut mrb_state, arg2: *mut mrb_irep);
}
extern "C" {
    pub fn mrb_irep_incref(arg1: *mut mrb_state, arg2: *mut mrb_irep);
}
extern "C" {
    pub fn mrb_irep_decref(arg1: *mut mrb_state, arg2: *mut mrb_irep);
}
extern "C" {
    pub fn mrb_irep_cutref(arg1: *mut mrb_state, arg2: *mut mrb_irep);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct REnv {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub stack: *mut mrb_value,
    pub cxt: *mut mrb_context,
    pub mid: mrb_sym,
}
#[test]
fn bindgen_test_layout_REnv() {
    assert_eq!(
        ::std::mem::size_of::<REnv>(),
        48usize,
        concat!("Size of: ", stringify!(REnv))
    );
    assert_eq!(
        ::std::mem::align_of::<REnv>(),
        8usize,
        concat!("Alignment of ", stringify!(REnv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REnv>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(REnv), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REnv>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(REnv),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REnv>())).stack as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(REnv),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REnv>())).cxt as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(REnv), "::", stringify!(cxt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REnv>())).mid as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(REnv), "::", stringify!(mid))
    );
}
impl REnv {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_env_unshare(arg1: *mut mrb_state, arg2: *mut REnv);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RProc {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub body: RProc__bindgen_ty_1,
    pub upper: *mut RProc,
    pub e: RProc__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RProc__bindgen_ty_1 {
    pub irep: *mut mrb_irep,
    pub func: mrb_func_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_RProc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RProc__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(RProc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RProc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RProc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc__bindgen_ty_1>())).irep as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc__bindgen_ty_1),
            "::",
            stringify!(irep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc__bindgen_ty_1>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc__bindgen_ty_1),
            "::",
            stringify!(func)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RProc__bindgen_ty_2 {
    pub target_class: *mut RClass,
    pub env: *mut REnv,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_RProc__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<RProc__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(RProc__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<RProc__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(RProc__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RProc__bindgen_ty_2>())).target_class as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc__bindgen_ty_2),
            "::",
            stringify!(target_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc__bindgen_ty_2>())).env as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc__bindgen_ty_2),
            "::",
            stringify!(env)
        )
    );
}
#[test]
fn bindgen_test_layout_RProc() {
    assert_eq!(
        ::std::mem::size_of::<RProc>(),
        48usize,
        concat!("Size of: ", stringify!(RProc))
    );
    assert_eq!(
        ::std::mem::align_of::<RProc>(),
        8usize,
        concat!("Alignment of ", stringify!(RProc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RProc), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc>())).body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc>())).upper as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RProc),
            "::",
            stringify!(upper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RProc>())).e as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(RProc), "::", stringify!(e))
    );
}
impl RProc {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_proc_new(arg1: *mut mrb_state, arg2: *mut mrb_irep) -> *mut RProc;
}
extern "C" {
    pub fn mrb_closure_new(arg1: *mut mrb_state, arg2: *mut mrb_irep) -> *mut RProc;
}
extern "C" {
    pub fn mrb_proc_new_cfunc(arg1: *mut mrb_state, arg2: mrb_func_t) -> *mut RProc;
}
extern "C" {
    pub fn mrb_closure_new_cfunc(
        mrb: *mut mrb_state,
        func: mrb_func_t,
        nlocals: ::std::os::raw::c_int,
    ) -> *mut RProc;
}
extern "C" {
    pub fn mrb_proc_copy(a: *mut RProc, b: *mut RProc);
}
extern "C" {
    pub fn mrb_f_send(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_proc_new_cfunc_with_env(
        arg1: *mut mrb_state,
        arg2: mrb_func_t,
        arg3: mrb_int,
        arg4: *const mrb_value,
    ) -> *mut RProc;
}
extern "C" {
    pub fn mrb_proc_cfunc_env_get(arg1: *mut mrb_state, arg2: mrb_int) -> mrb_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kh_mt {
    pub n_buckets: khint_t,
    pub size: khint_t,
    pub n_occupied: khint_t,
    pub ed_flags: *mut u8,
    pub keys: *mut mrb_sym,
    pub vals: *mut mrb_method_t,
}
#[test]
fn bindgen_test_layout_kh_mt() {
    assert_eq!(
        ::std::mem::size_of::<kh_mt>(),
        40usize,
        concat!("Size of: ", stringify!(kh_mt))
    );
    assert_eq!(
        ::std::mem::align_of::<kh_mt>(),
        8usize,
        concat!("Alignment of ", stringify!(kh_mt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).n_buckets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(n_buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).n_occupied as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(n_occupied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).ed_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(ed_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).keys as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kh_mt>())).vals as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kh_mt),
            "::",
            stringify!(vals)
        )
    );
}
pub type kh_mt_t = kh_mt;
extern "C" {
    pub fn kh_alloc_mt(mrb: *mut mrb_state, h: *mut kh_mt_t);
}
extern "C" {
    pub fn kh_init_mt_size(mrb: *mut mrb_state, size: khint_t) -> *mut kh_mt_t;
}
extern "C" {
    pub fn kh_init_mt(mrb: *mut mrb_state) -> *mut kh_mt_t;
}
extern "C" {
    pub fn kh_destroy_mt(mrb: *mut mrb_state, h: *mut kh_mt_t);
}
extern "C" {
    pub fn kh_clear_mt(mrb: *mut mrb_state, h: *mut kh_mt_t);
}
extern "C" {
    pub fn kh_get_mt(mrb: *mut mrb_state, h: *mut kh_mt_t, key: mrb_sym) -> khint_t;
}
extern "C" {
    pub fn kh_put_mt(
        mrb: *mut mrb_state,
        h: *mut kh_mt_t,
        key: mrb_sym,
        ret: *mut ::std::os::raw::c_int,
    ) -> khint_t;
}
extern "C" {
    pub fn kh_resize_mt(mrb: *mut mrb_state, h: *mut kh_mt_t, new_n_buckets: khint_t);
}
extern "C" {
    pub fn kh_del_mt(mrb: *mut mrb_state, h: *mut kh_mt_t, x: khint_t);
}
extern "C" {
    pub fn kh_copy_mt(mrb: *mut mrb_state, h: *mut kh_mt_t) -> *mut kh_mt_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct global_variable {
    pub counter: ::std::os::raw::c_int,
    pub data: *mut mrb_value,
    pub getter: ::std::option::Option<unsafe extern "C" fn() -> mrb_value>,
    pub setter: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_global_variable() {
    assert_eq!(
        ::std::mem::size_of::<global_variable>(),
        32usize,
        concat!("Size of: ", stringify!(global_variable))
    );
    assert_eq!(
        ::std::mem::align_of::<global_variable>(),
        8usize,
        concat!("Alignment of ", stringify!(global_variable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_variable>())).counter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(global_variable),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_variable>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(global_variable),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_variable>())).getter as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(global_variable),
            "::",
            stringify!(getter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_variable>())).setter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(global_variable),
            "::",
            stringify!(setter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct global_entry {
    pub var: *mut global_variable,
    pub id: mrb_sym,
}
#[test]
fn bindgen_test_layout_global_entry() {
    assert_eq!(
        ::std::mem::size_of::<global_entry>(),
        16usize,
        concat!("Size of: ", stringify!(global_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<global_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(global_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_entry>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(global_entry),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<global_entry>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(global_entry),
            "::",
            stringify!(id)
        )
    );
}
extern "C" {
    pub fn mrb_vm_special_get(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_special_set(arg1: *mut mrb_state, arg2: mrb_sym, arg3: mrb_value);
}
extern "C" {
    pub fn mrb_vm_iv_get(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_iv_set(arg1: *mut mrb_state, arg2: mrb_sym, arg3: mrb_value);
}
extern "C" {
    pub fn mrb_vm_cv_get(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_cv_set(arg1: *mut mrb_state, arg2: mrb_sym, arg3: mrb_value);
}
extern "C" {
    pub fn mrb_vm_const_get(arg1: *mut mrb_state, arg2: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_vm_const_set(arg1: *mut mrb_state, arg2: mrb_sym, arg3: mrb_value);
}
extern "C" {
    pub fn mrb_const_get(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_const_set(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym, arg4: mrb_value);
}
extern "C" {
    pub fn mrb_const_defined(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_const_remove(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym);
}
extern "C" {
    pub fn mrb_iv_p(mrb: *mut mrb_state, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_iv_check(mrb: *mut mrb_state, sym: mrb_sym);
}
extern "C" {
    pub fn mrb_obj_iv_get(mrb: *mut mrb_state, obj: *mut RObject, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_iv_set(mrb: *mut mrb_state, obj: *mut RObject, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    pub fn mrb_obj_iv_defined(mrb: *mut mrb_state, obj: *mut RObject, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_iv_get(mrb: *mut mrb_state, obj: mrb_value, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_iv_set(mrb: *mut mrb_state, obj: mrb_value, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    pub fn mrb_iv_defined(arg1: *mut mrb_state, arg2: mrb_value, arg3: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_iv_remove(mrb: *mut mrb_state, obj: mrb_value, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_iv_copy(mrb: *mut mrb_state, dst: mrb_value, src: mrb_value);
}
extern "C" {
    pub fn mrb_const_defined_at(mrb: *mut mrb_state, mod_: mrb_value, id: mrb_sym) -> mrb_bool;
}
extern "C" {
    /// Get a global variable. Will return nil if the var does not exist
    ///
    /// Example:
    ///
    /// !!!ruby
    /// # Ruby style
    /// var = $value
    ///
    /// !!!c
    /// // C style
    /// mrb_sym sym = mrb_intern_lit(mrb, "$value");
    /// mrb_value var = mrb_gv_get(mrb, sym);
    ///
    /// @param mrb The mruby state reference
    /// @param sym The name of the global variable
    /// @return The value of that global variable. May be nil
    pub fn mrb_gv_get(mrb: *mut mrb_state, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    /// Set a global variable
    ///
    /// Example:
    ///
    /// !!!ruby
    /// # Ruby style
    /// $value = "foo"
    ///
    /// !!!c
    /// // C style
    /// mrb_sym sym = mrb_intern_lit(mrb, "$value");
    /// mrb_gv_set(mrb, sym, mrb_str_new_lit("foo"));
    ///
    /// @param mrb The mruby state reference
    /// @param sym The name of the global variable
    /// @param val The value of the global variable
    pub fn mrb_gv_set(mrb: *mut mrb_state, sym: mrb_sym, val: mrb_value);
}
extern "C" {
    /// Remove a global variable.
    ///
    /// Example:
    ///
    /// !!!ruby
    /// # Ruby style
    /// $value = nil
    ///
    /// !!!c
    /// // C style
    /// mrb_sym sym = mrb_intern_lit(mrb, "$value");
    /// mrb_gv_remove(mrb, sym);
    ///
    /// @param mrb The mruby state reference
    /// @param sym The name of the global variable
    /// @param val The value of the global variable
    pub fn mrb_gv_remove(mrb: *mut mrb_state, sym: mrb_sym);
}
extern "C" {
    pub fn mrb_cv_get(mrb: *mut mrb_state, mod_: mrb_value, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_mod_cv_set(mrb: *mut mrb_state, c: *mut RClass, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    pub fn mrb_cv_set(mrb: *mut mrb_state, mod_: mrb_value, sym: mrb_sym, v: mrb_value);
}
extern "C" {
    pub fn mrb_cv_defined(mrb: *mut mrb_state, mod_: mrb_value, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_obj_iv_inspect(arg1: *mut mrb_state, arg2: *mut RObject) -> mrb_value;
}
extern "C" {
    pub fn mrb_mod_constants(mrb: *mut mrb_state, mod_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_f_global_variables(mrb: *mut mrb_state, self_: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_obj_instance_variables(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_mod_class_variables(arg1: *mut mrb_state, arg2: mrb_value) -> mrb_value;
}
extern "C" {
    pub fn mrb_mod_cv_get(mrb: *mut mrb_state, c: *mut RClass, sym: mrb_sym) -> mrb_value;
}
extern "C" {
    pub fn mrb_mod_cv_defined(mrb: *mut mrb_state, c: *mut RClass, sym: mrb_sym) -> mrb_bool;
}
extern "C" {
    pub fn mrb_gc_mark_gv(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_gc_free_gv(arg1: *mut mrb_state);
}
extern "C" {
    pub fn mrb_gc_mark_iv(arg1: *mut mrb_state, arg2: *mut RObject);
}
extern "C" {
    pub fn mrb_gc_mark_iv_size(arg1: *mut mrb_state, arg2: *mut RObject) -> usize;
}
extern "C" {
    pub fn mrb_gc_free_iv(arg1: *mut mrb_state, arg2: *mut RObject);
}
/// Custom data type description.
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_data_type {
    /// data type name
    pub struct_name: *const ::std::os::raw::c_char,
    /// data type release function pointer
    pub dfree: ::std::option::Option<
        unsafe extern "C" fn(mrb: *mut mrb_state, arg1: *mut ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_mrb_data_type() {
    assert_eq!(
        ::std::mem::size_of::<mrb_data_type>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_data_type))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_data_type>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_data_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_data_type>())).struct_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_data_type),
            "::",
            stringify!(struct_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_data_type>())).dfree as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_data_type),
            "::",
            stringify!(dfree)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RData {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub c: *mut RClass,
    pub gcnext: *mut RBasic,
    pub iv: *mut iv_tbl,
    pub type_: *const mrb_data_type,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RData() {
    assert_eq!(
        ::std::mem::size_of::<RData>(),
        48usize,
        concat!("Size of: ", stringify!(RData))
    );
    assert_eq!(
        ::std::mem::align_of::<RData>(),
        8usize,
        concat!("Alignment of ", stringify!(RData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).c as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RData), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).gcnext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RData),
            "::",
            stringify!(gcnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).iv as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(RData), "::", stringify!(iv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RData>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RData),
            "::",
            stringify!(data)
        )
    );
}
impl RData {
    #[inline]
    pub fn tt(&self) -> mrb_vtype {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tt(&mut self, val: mrb_vtype) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn color(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_color(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tt: mrb_vtype,
        color: u32,
        flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tt: u32 = unsafe { ::std::mem::transmute(tt) };
            tt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let color: u32 = unsafe { ::std::mem::transmute(color) };
            color as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn mrb_data_object_alloc(
        mrb: *mut mrb_state,
        klass: *mut RClass,
        datap: *mut ::std::os::raw::c_void,
        type_: *const mrb_data_type,
    ) -> *mut RData;
}
extern "C" {
    pub fn mrb_data_check_type(mrb: *mut mrb_state, arg1: mrb_value, arg2: *const mrb_data_type);
}
extern "C" {
    pub fn mrb_data_get_ptr(
        mrb: *mut mrb_state,
        arg1: mrb_value,
        arg2: *const mrb_data_type,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mrb_data_check_get_ptr(
        mrb: *mut mrb_state,
        arg1: mrb_value,
        arg2: *const mrb_data_type,
    ) -> *mut ::std::os::raw::c_void;
}
pub const mrb_debug_line_type_mrb_debug_line_ary: mrb_debug_line_type = 0;
pub const mrb_debug_line_type_mrb_debug_line_flat_map: mrb_debug_line_type = 1;
pub type mrb_debug_line_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_irep_debug_info_line {
    pub start_pos: u32,
    pub line: u16,
}
#[test]
fn bindgen_test_layout_mrb_irep_debug_info_line() {
    assert_eq!(
        ::std::mem::size_of::<mrb_irep_debug_info_line>(),
        8usize,
        concat!("Size of: ", stringify!(mrb_irep_debug_info_line))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_irep_debug_info_line>(),
        4usize,
        concat!("Alignment of ", stringify!(mrb_irep_debug_info_line))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_irep_debug_info_line>())).start_pos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_line),
            "::",
            stringify!(start_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep_debug_info_line>())).line as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_line),
            "::",
            stringify!(line)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mrb_irep_debug_info_file {
    pub start_pos: u32,
    pub filename: *const ::std::os::raw::c_char,
    pub filename_sym: mrb_sym,
    pub line_entry_count: u32,
    pub line_type: mrb_debug_line_type,
    pub lines: mrb_irep_debug_info_file__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mrb_irep_debug_info_file__bindgen_ty_1 {
    pub ptr: *mut ::std::os::raw::c_void,
    pub flat_map: *mut mrb_irep_debug_info_line,
    pub ary: *mut u16,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_mrb_irep_debug_info_file__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mrb_irep_debug_info_file__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(mrb_irep_debug_info_file__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_irep_debug_info_file__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(mrb_irep_debug_info_file__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_irep_debug_info_file__bindgen_ty_1>())).ptr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_file__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_irep_debug_info_file__bindgen_ty_1>())).flat_map as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_file__bindgen_ty_1),
            "::",
            stringify!(flat_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_irep_debug_info_file__bindgen_ty_1>())).ary as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_file__bindgen_ty_1),
            "::",
            stringify!(ary)
        )
    );
}
#[test]
fn bindgen_test_layout_mrb_irep_debug_info_file() {
    assert_eq!(
        ::std::mem::size_of::<mrb_irep_debug_info_file>(),
        40usize,
        concat!("Size of: ", stringify!(mrb_irep_debug_info_file))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_irep_debug_info_file>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_irep_debug_info_file))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_irep_debug_info_file>())).start_pos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_file),
            "::",
            stringify!(start_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_irep_debug_info_file>())).filename as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_file),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_irep_debug_info_file>())).filename_sym as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_file),
            "::",
            stringify!(filename_sym)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_irep_debug_info_file>())).line_entry_count as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_file),
            "::",
            stringify!(line_entry_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mrb_irep_debug_info_file>())).line_type as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_file),
            "::",
            stringify!(line_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep_debug_info_file>())).lines as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info_file),
            "::",
            stringify!(lines)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_irep_debug_info {
    pub pc_count: u32,
    pub flen: u16,
    pub files: *mut *mut mrb_irep_debug_info_file,
}
#[test]
fn bindgen_test_layout_mrb_irep_debug_info() {
    assert_eq!(
        ::std::mem::size_of::<mrb_irep_debug_info>(),
        16usize,
        concat!("Size of: ", stringify!(mrb_irep_debug_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mrb_irep_debug_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mrb_irep_debug_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep_debug_info>())).pc_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info),
            "::",
            stringify!(pc_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep_debug_info>())).flen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info),
            "::",
            stringify!(flen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mrb_irep_debug_info>())).files as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mrb_irep_debug_info),
            "::",
            stringify!(files)
        )
    );
}
extern "C" {
    pub fn mrb_debug_get_filename(irep: *mut mrb_irep, pc: isize) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mrb_debug_get_line(irep: *mut mrb_irep, pc: isize) -> i32;
}
extern "C" {
    pub fn mrb_debug_info_append_file(
        mrb: *mut mrb_state,
        irep: *mut mrb_irep,
        start_pos: u32,
        end_pos: u32,
    ) -> *mut mrb_irep_debug_info_file;
}
extern "C" {
    pub fn mrb_debug_info_alloc(
        mrb: *mut mrb_state,
        irep: *mut mrb_irep,
    ) -> *mut mrb_irep_debug_info;
}
extern "C" {
    pub fn mrb_debug_info_free(mrb: *mut mrb_state, d: *mut mrb_irep_debug_info);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_tbl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alloca_header {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kh_n2s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symbol_name {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mrb_shared_string {
    pub _address: u8,
}
